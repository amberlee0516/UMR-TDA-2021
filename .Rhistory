tuples[2]
tuples[2]
tuples[1]
tuples[2]
tuples[3]
tuples[2][2]
tuples[2,2]
tuples[2]
# Functions for splitting into years and seasons - using rplot: can have nas
# Split by year and season
make_year_tuples <- function(index, year_partition) {
return(c(year_partition[index], year_partition[index + 1]))
}
# Creates trees by groups of years
tree_by_years_rpart <- function(year_tuple, water_data) {
water_data <- water_data %>% filter(year >= year_tuple[1] &
year <= year_tuple[2])
tr.TN_rpart <- rpart(TN ~.,
data = (water_data %>% sample_frac(0.5)),
method = "anova",
control = (maxdepth = 20))
fancyRpartPlot(tr.TN_rpart)
return(tr.TN_rpart)
}
# Create trees by season
tree_by_season_rpart<- function(season, min_year, max_year, year_interval, water_data) {
year_partition <- seq(min_year, max_year, year_interval)
year_tuples <- lapply(1: (length(year_partition) - 1), make_year_tuples, year_partition)
return(year_tuples)
#water_data <- water_data %>% filter(season == season)
#tree_models <- lapply(year_tuples, tree_by_years_rpart, water_data)
#return(tree_models)
}
# Split into groups of 7 years
trees.sp.1992.2020 <- tree_by_season_rpart(1, 1992, 2020, 7, comp_TN_data)
View(trees.sp.1992.2020)
# Functions for splitting into years and seasons - using rplot: can have nas
# Split by year and season
make_year_tuples <- function(index, year_partition) {
return(c(year_partition[index], year_partition[index + 1]))
}
# Creates trees by groups of years
tree_by_years_rpart <- function(year_tuple, water_data) {
water_data <- water_data %>% filter(year >= year_tuple[1] &
year <= year_tuple[2])
tr.TN_rpart <- rpart(TN ~.,
data = (water_data %>% sample_frac(0.5)),
method = "anova",
control = (maxdepth = 20))
fancyRpartPlot(tr.TN_rpart)
return(tr.TN_rpart)
}
# Create trees by season
tree_by_season_rpart<- function(season, min_year, max_year, year_interval, water_data) {
year_partition <- seq(min_year, max_year, year_interval)
year_tuples <- lapply(1: (length(year_partition) - 1), make_year_tuples, year_partition)
water_data <- water_data %>% filter(season == season)
#tree_models <- lapply(year_tuples, tree_by_years_rpart, water_data)
return(water_data)
}
# Split into groups of 7 years
trees.sp.1992.2020 <- tree_by_season_rpart(1, 1992, 2020, 7, comp_TN_data)
View(trees.sp.1992.2020)
# Functions for splitting into years and seasons - using rplot: can have nas
# Split by year and season
make_year_tuples <- function(index, year_partition) {
return(c(year_partition[index], year_partition[index + 1]))
}
# Creates trees by groups of years
tree_by_years_rpart <- function(year_tuple, water_data) {
water_data <- water_data %>% filter(year >= year_tuple[1] &
year <= year_tuple[2])
tr.TN_rpart <- rpart(TN ~.,
data = (water_data %>% sample_frac(0.5)),
method = "anova",
control = (maxdepth = 20))
fancyRpartPlot(tr.TN_rpart)
return(tr.TN_rpart)
}
# Create trees by season
tree_by_season_rpart<- function(season, min_year, max_year, year_interval, water_data) {
year_partition <- seq(min_year, max_year, year_interval)
year_tuples <- lapply(1: (length(year_partition) - 1), make_year_tuples, year_partition)
water_data <- water_data %>% dplyr::filter(season == season)
#tree_models <- lapply(year_tuples, tree_by_years_rpart, water_data)
return(water_data)
}
# Split into groups of 7 years
trees.sp.1992.2020 <- tree_by_season_rpart(1, 1992, 2020, 7, comp_TN_data)
View(trees.sp.1992.2020)
setwd("/Users/alainastockdill/UMR-TDA-2021")
data <- read_csv(file = "LTRM data/ltrm_water_data_lat_long.csv")
library(tidyverse)
library(ggplot2)
library(lubridate)
library(corrplot)
library(RColorBrewer)
library(kableExtra)
setwd("/Users/alainastockdill/UMR-TDA-2021")
data <- read_csv(file = "LTRM data/ltrm_water_data_lat_long.csv")
data <- read.csv(file = "LTRM data/ltrm_water_data_lat_long.csv")
min(data$TP)
View(data)
min(data$TP)
View(data)
min(data$TP)
min(data$TP, na.rm = TRUE)
data %>% filter(TP > 0)
temp < -data %>% filter(TP > 0)
temp < -data %>% filter(TP > 0)
temp <- data %>% filter(TP > 0)
min(temp$TP, na.rm = TRUE)
temp <- data %>% filter(TN > 0)
min(temp$TN, na.rm = TRUE)
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
library(tidyverse)
library(ggplot2)
library(lubridate)
library(corrplot)
library(RColorBrewer)
library(kableExtra)
# set working directory to source file location
# setwd("~/Documents/GitHub/UMR-TDA-2021")
water20 <- read.csv(file = "../LTRM data/ltrm_water_data_lat_long.csv")
water_var <- c('TN','TP','TEMP','DO','TURB',
'COND','VEL','SS','WDP','CHLcal','SECCHI')
waterQF_var <- paste(water_var, "QF", sep = "")
identifier_var <- c('SHEETBAR', 'DATE', 'LATITUDE', 'LONGITUDE', 'FLDNUM', 'STRATUM', 'LOCATCD')
waterQF_var <- waterQF_var[waterQF_var != "WDPQF" &
waterQF_var != "CHLcalQF"]
waterQF_var <- c(waterQF_var, "ZMAXQF")
duplicates <- water20 %>%
select(SHEETBAR) %>%
group_by(SHEETBAR) %>%
summarize(count = n())
duplicates %>% head()
count_n_duplicates <- function(n, df) {
return((df %>% filter(count == n) %>% dim())[1]/156474) #156k distinct sheetbars
}
count_duplicates <- data.frame(proportion = sapply(1:8, count_n_duplicates,
duplicates),
number_duplicates = 1:8)
ggplot(count_duplicates, aes(x = number_duplicates, y = proportion)) +
geom_bar(stat = "identity")
count_duplicates %>% kbl(booktabs = T)
water20 <- water20 %>%
filter(CALCZCD == "SF") %>%
filter(SITETYPE != 2) %>%
select(all_of(c(identifier_var, water_var, waterQF_var)))
qf_A0 <- c("TURBQF", "TEMPQF", "DOQF", "VELQF", "ZMAXQF",
"SECCHIQF", "CONDQF")
qf_864 <- c("TNQF", "TPQF", "SSQF")
water20$tmp_idx <- 1:nrow(water20)
qfcodes_setNA <- function(qf_A0, qf_864, water_df,
identifier_var, water_var, waterQF_var){
# qf_A0 is a character vector of the variable qf names for which
# A, 0 qf codes are bad
# qf_864 is a character vector of the variable qf names for which
# 8, 64 qf codes are bad
# water_df is the entire water_df
# last 3 variables are just for naming
replace_na_qf <- function(qf_str, df, two_badqfval){
# remove QF at the end of qf_str
var_str <- substr(qf_str, 1, nchar(qf_str)-2)
if (var_str == "ZMAX") { var_str <- "WDP"}
df <- df %>%
# !!sym is for non standard evaluation
mutate(!!sym(var_str) := case_when(!!sym(qf_str) == two_badqfval[1] ~ NA_real_,
# specify the type of NA correctly
!!sym(qf_str) == two_badqfval[2] ~ NA_real_,
TRUE ~ !!sym(var_str))) %>%
# other QF code values are fine, keep data
select(all_of(c("tmp_idx", var_str, qf_str))) # keep sheetbar for joins
return(df)
}
# remove_864 <- function(qf_str, df){
#
#   # remove the QF at the end
#   var_str <- substr(qf_str, 1, nchar(qf_str)-2)
#
#   df <- df %>%
#     mutate(!!sym(var_str) := case_when(!!sym(qf_str) == 8 ~ NA_real_,
#                                        # use correct NA type and !!sym for NSE
#                                        !!sym(qf_str) == 64 ~ NA_real_,
#                                        TRUE ~ !!sym(var_str))) %>%
#                                        # remaining QF code values are fine
#     select(all_of(c("tmp_idx", var_str, qf_str))) # sheetbars for joining
#
# }
remove_A0_df <- bind_cols(lapply(qf_A0, replace_na_qf, water_df, c("A", "0"))) %>%
rename(tmp_idx = `tmp_idx...1`) %>%
select(!contains("..."))
remove_864_df <- bind_cols(lapply(qf_864, replace_na_qf, water_df, c(8, 64))) %>%
rename(tmp_idx = `tmp_idx...1`) %>%
select(!contains("..."))
fixedqf_df <- inner_join(remove_864_df, remove_A0_df, by = "tmp_idx") %>%
inner_join(water_df, by = c("tmp_idx", waterQF_var)) %>%
# this causes duplicate columns for water_var, which we do want
# because water_df has the old (wrong) values for water_var
select(!contains(".y")) %>% # remove the old (wrong) values from water_df
rename_with(~ gsub(".x", "", .), contains(".x")) %>% # rename
select(all_of(c(identifier_var, water_var, waterQF_var))) # reorder columns
return(fixedqf_df)
}
qfwater20 <- qfcodes_setNA(qf_A0, qf_864, water20,
identifier_var, water_var, waterQF_var)
qfcodes_check <- function(qf_str, df, two_badqfval){
var_str <- substr(qf_str, 1, nchar(qf_str)-2)
if (var_str == "ZMAX") {var_str = "WDP"}
badqf_length <- df %>%
filter(!!sym(qf_str) == two_badqfval[1] | !!sym(qf_str) == two_badqfval[2]) %>%
pull(!!sym(var_str)) %>%
length()
badqf_sum <- df %>%
filter(!!sym(qf_str) == two_badqfval[1] | !!sym(qf_str) == two_badqfval[2]) %>%
pull(!!sym(var_str)) %>%
is.na(.) %>%
sum()
if (badqf_length != badqf_sum) {return(qf_str)}
return(badqf_length == badqf_sum)
}
c(unlist(lapply(qf_A0, qfcodes_check, qfwater20, c("A", "0"))),
unlist(lapply(qf_864, qfcodes_check, qfwater20, c(8, 64))))
# Collapse the rows with the same SHEETBAR code
row_collapse <- function(data, water_var, identifier_var) {
# Count how many rows each sheetbar has
sheetbar_counts <- data %>%
group_by(SHEETBAR) %>%
dplyr::summarize(count = n()) %>%
arrange(-count) # 147130
# Filter for the sheetbars that have multiple rows
sheetbar_dups <- sheetbar_counts %>% filter(count > 1) # 33
data_dups <- data[data$SHEETBAR %in% sheetbar_dups$SHEETBAR, ] # 74
# Set aside the rows with sheetbars that only occur once
water_cleaned <- data[!(data$SHEETBAR %in% sheetbar_dups$SHEETBAR), ] %>%
select(all_of(c(identifier_var, water_var)))
# Average the continuous vars and re-merge the identifiers to the collapsed rows
data_dups_ids <- data_dups[identifier_var]
# Find the mean of the continuous variables
data_dups <- aggregate(data_dups[water_var],
by = list(data_dups$SHEETBAR),
FUN = mean,
na.rm = TRUE,
na.action = na.pass) %>%
rename('SHEETBAR' = 'Group.1')
# Rounds the data frame
is.num <-sapply(data_dups, is.numeric)
data_dups[is.num] <- lapply(data_dups[is.num], round, 2)
# Replace NaN with Na to be consistent with the rest of the data
data_dups[is.na(data_dups)] <- NA
# Merge the ids back to the water_vars
data_dups <- unique(merge(data_dups, data_dups_ids, by = 'SHEETBAR'))
# Add the collapsed rows to the cleaned data
water_cleaned <- rbind(water_cleaned, data_dups)
return(water_cleaned)
}
# Just continuous vars and identifiers (remove QF columns)
qfwater20 <- row_collapse(qfwater20[c(water_var, identifier_var)],
water_var, identifier_var)
tmp2 <- qfwater20 %>%
mutate(across("TP"), ~ ifelse(. < 0, .001, .))
sum(qfwater20$TP < 0)
sum(qfwater20$TP < 0, na.rm = TRUE)
tmp2 <- qfwater20 %>%
mutate(TP = ifelse(TP < 0, .001, .))
sum(tmp2$TP < 0, na.rm = TRUE)
sum(tmp2$TP < 0)
tmp2$TP
sum(qfwater20$TP < 0, na.rm = TRUE)
tmp2 <- mutate(qfwater20, TP = ifelse(TP < 0, .001, .))
tmp2 <- mutate(qfwater20, 'TP' = ifelse(TP < 0, .001, .))
tmp2 <- mutate(qfwater20, TP = ifelse(TP < 0, .001, .))
# Set na TP values to detection limit - .001
tmp2 <- qfwater20 %>% mutate( TP, ~ dplyr::ifelse(TP < 0, .001, .))
# Set na TP values to detection limit - .001
tmp2 <- mutate( qfwater20, TP = ifelse(TP < 0, .001, oops))
# Set na TP values to detection limit - .001
tmp2 <- mutate( qfwater20, TP = ifelse(TP < 0, .001, "oops"))
sum(qfwater20$TP < 0, na.rm = TRUE)
t
tmp2$TP
qfwater20$TP
ifelse
tmp2$TP
# Set na TP values to detection limit - .001
tmp2 <- mutate( qfwater20, TP = ifelse(TP < 0, .001,.))
# Set na TP values to detection limit - .001
tmp2 <- mutate( qfwater20, TP = ifelse(TP < 0, .001))
# Set na TP values to detection limit - .001
tmp2 <- mutate( qfwater20, TP = ifelse(TP < 0, .001, "oops"))
tmp2$TP
# Set na TP values to detection limit - .001
tmp2 <- mutate( qfwater20, TP = if(TP < 0, .001))
# Set na TP values to detection limit - .001
tmp2 <- mutate( qfwater20, TP = ifelse(TP < 0, .001, TP))
tmp2$TP
sum(tmp2$TP < 0)
sum(tmp2$TP < 0, na.rm = TRUE)
water_Var
water_var
# Get a list of minimum values
neg_cols <- water_var[water_var != c("DO", "TURB", "VEL", "SECCHI")]
neg_cols
# Get a list of minimum values
neg_cols <- water_var[c("TP", "TN", "SS", "CHLcal", "TEMP", "WDP")]
neg_cols
# Get a list of minimum values
neg_cols <- water_Var[water_var[c("TP", "TN", "SS", "CHLcal", "TEMP", "WDP")]]
# Get a list of minimum values
neg_cols <- water_var[water_var[c("TP", "TN", "SS", "CHLcal", "TEMP", "WDP")]]
neg_cols
water_var[1]
c("TP", "TN", "SS", "CHLcal", "TEMP", "WDP")
# Get a list of minimum values
neg_cols <- water_var[c("TP", "TN", "SS", "CHLcal", "TEMP", "WDP")]
neg_cols
water_var[c("TP", "TN", "SS", "CHLcal", "TEMP", "WDP")]
c("TP", "TN", "SS", "CHLcal", "TEMP", "WDP")
# Get a list of minimum values
neg_cols <- water_var["TP"]
neg_cols
# Get a list of minimum values
neg_cols <- water_var[TP]
# Get a list of minimum values
neg_cols <- water_var[1]
# Get a list of minimum values
neg_cols <- water_var['TN']
# Get a list of minimum values
neg_cols <- water_var[TN]
water_var
neg_cols <- water_var[c(1, 2, 3, 8, 9, 10)]
temp <- data %>% filter(TN > 0)
min(temp$TN, na.rm = TRUE)
temp <- data %>% filter(TEMP > 0)
min(temp$TEMP, na.rm = TRUE)
temp <- data %>% filter(SS > 0)
min(temp$SS, na.rm = TRUE)
temp <- data %>% filter(WDP > 0)
min(temp$WDP, na.rm = TRUE)
temp <- data %>% filter(CHLcal> 0)
min(temp$CHLcal, na.rm = TRUE)
minimums <- c(0.024, .001, .1, 0.02, 0.1, 0.00962 )
# Get a list of minimum values
neg_cols <- water_var[c(1, 2, 3, 8, 9, 10)]
minimums <- c(0.024, .001, .1, 0.02, 0.1, 0.00962 )
# Function that will replace any negative values in a column with a specified value
replace_negatives <- function(neg_col, replace_val, data) {
data <- mutate( data, neg_col = ifelse(TP < 0, replace_val, neg_col))
}
water <- lapply(1: length(neg_cols), replace_negatives, neg_cols, minimums, qfwater20)
water <- lapply(neg_cols, replace_negatives, minimums, qfwater20)
water <- lapply(neg_cols, replace_negatives, minimums, qfwater20)
View(water)
water[1]
water[1]$TN
water[2]
View(water[1])
water <- lapply(neg_cols, replace_negatives, minimums, qfwater20[neg_cols])
View(water)
minimums <- lapply(neg_cols, qfwater20)
# Get the postive minimum value we will you for each of negative values
get_minimum <- function(variable, data) {
temp <- data %>% filter(variable> 0)
return( min(temp$variable, na.rm = TRUE))
}
# Columns that we need to replace negatives for - for some reason c("name"s) is not working
neg_cols <- water_var[c(1, 2, 3, 8, 9, 10)]
minimums <- lapply(neg_cols, qfwater20)
minimums <- lapply(neg_cols, get_minimum, qfwater20)
View(minimums)
minimums
# NEITHER OF THESE WORK
minimums <- lapply(neg_cols, get_minimum, qfwater20)
View(minimums)
# Columns that we need to replace negatives for - for some reason c("name"s) is not working
neg_cols <- list(water_var[c(1, 2, 3, 8, 9, 10)])
View(neg_cols)
# Columns that we need to replace negatives for - for some reason c("name"s) is not working
neg_cols <- list("TN", "TP","TEMP", "SS", "CHLcal", "WDP")
View(neg_cols)
# NEITHER OF THESE WORK
minimums <- lapply(neg_cols, get_minimum, qfwater20)
View(minimums)
# Columns that we need to replace negatives for - for some reason c("name"s) is not working
neg_cols <- list('TN', "TP","TEMP", "SS", "CHLcal", "WDP")
View(neg_cols)
qfwater20[negcols[1]]
qfwater20[neg_cols[1]]
neg_cols[1]
qfwater20[neg_cols[1], ]
qfwater20[,neg_cols[1] ]
water_var
# Columns that we need to replace negatives for - for some reason c("name"s) is not working
neg_cols <- water_var[c("TN", "TP"]
# Columns that we need to replace negatives for - for some reason c("name"s) is not working
neg_cols <- water_var[c("TN", "TP")]
# Columns that we need to replace negatives for - for some reason c("name"s) is not working
neg_cols <- water_var[c(1, 2)]
# Columns that we need to replace negatives for - for some reason c("name"s) is not working
neg_cols <- water_var[c(1, 2, 3, 8, 9, 10)]
tmp2 <- mutate( qfwater20, TN = ifelse(TN < 0, .024, TN))
### Just TP
sum(qfwater20$TN < 0, na.rm = TRUE)
tmp2 <- mutate( qfwater20, TN = ifelse(TN < 0, .024, TN))
sum(tmp2$TP < 0, na.rm = TRUE)
sum(tmp2$TN < 0, na.rm = TRUE)
temp <- qfwater20 %>% filter(TN > 0 )
minimum(temp$TN, na.rm =TRUE)
min(temp$TN, na.rm =TRUE)
temp <- qfwater20 %>% filter(TP > 0 )
min(temp$TP, na.rm =TRUE)
min(temp$SS, na.rm =TRUE)
temp <- qfwater20 %>% filter(SS > 0 )
min(temp$SS, na.rm =TRUE)
temp <- qfwater20 %>% filter(CHLcal > 0 )
min(temp$CHLcal, na.rm =TRUE)
temp <- qfwater20 %>% filter(TEMP > 0 )
min(temp$TEMP, na.rm =TRUE)
tmp2 <- mutate( tmp2, TEMP = ifelse(TEMP < 0, 0.05, CHLcal))
# Set na TP values to detection limit - .001
tmp2 <- mutate( qfwater20, TP = ifelse(TP < 0, .002, TP))
tmp2 <- mutate( tmp2, TN = ifelse(TN < 0, .041, TN))
tmp2 <- mutate( tmp2, SS = ifelse(SS < 0, .02, SS))
tmp2 <- mutate( tmp2, WDP = ifelse(WDP < 0, 0, WDP))
tmp2 <- mutate( tmp2, CHLcal = ifelse(CHLcal < 0, 0.0183, CHLcal))
tmp2 <- mutate( tmp2, TEMP = ifelse(TEMP < 0, 0.05, CHLcal))
sum(tmp2$TN < 0, na.rm = TRUE)
sum(tmp2$SS < 0, na.rm = TRUE)
sum(tmp2$WDP < 0, na.rm = TRUE)
sum(tmp2$CHLcal < 0, na.rm = TRUE)
sum(tmp2$TEMP < 0, na.rm = TRUE)
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
library(tidyverse)
library(ggplot2)
library(lubridate)
library(corrplot)
library(RColorBrewer)
library(kableExtra)
# set working directory to source file location
# setwd("~/Documents/GitHub/UMR-TDA-2021")
water20 <- read.csv(file = "../LTRM data/ltrm_water_data_lat_long.csv")
water_var <- c('TN','TP','TEMP','DO','TURB',
'COND','VEL','SS','WDP','CHLcal','SECCHI')
waterQF_var <- paste(water_var, "QF", sep = "")
identifier_var <- c('SHEETBAR', 'DATE', 'LATITUDE', 'LONGITUDE', 'FLDNUM', 'STRATUM', 'LOCATCD')
waterQF_var <- waterQF_var[waterQF_var != "WDPQF" &
waterQF_var != "CHLcalQF"]
waterQF_var <- c(waterQF_var, "ZMAXQF")
waterQF_var <- waterQF_var[waterQF_var != "WDPQF" &
waterQF_var != "CHLcalQF"]
waterQF_var <- c(waterQF_var, "ZMAXQF")
water20 <- water20 %>%
filter(CALCZCD == "SF") %>%
filter(SITETYPE != 2) %>%
select(all_of(c(identifier_var, water_var, waterQF_var)))
qf_A0 <- c("TURBQF", "TEMPQF", "DOQF", "VELQF", "ZMAXQF",
"SECCHIQF", "CONDQF")
qf_864 <- c("TNQF", "TPQF", "SSQF")
water20$tmp_idx <- 1:nrow(water20)
qfcodes_setNA <- function(qf_A0, qf_864, water_df,
identifier_var, water_var, waterQF_var){
# qf_A0 is a character vector of the variable qf names for which
# A, 0 qf codes are bad
# qf_864 is a character vector of the variable qf names for which
# 8, 64 qf codes are bad
# water_df is the entire water_df
# last 3 variables are just for naming
replace_na_qf <- function(qf_str, df, two_badqfval){
# remove QF at the end of qf_str
var_str <- substr(qf_str, 1, nchar(qf_str)-2)
if (var_str == "ZMAX") { var_str <- "WDP"}
df <- df %>%
# !!sym is for non standard evaluation
mutate(!!sym(var_str) := case_when(!!sym(qf_str) == two_badqfval[1] ~ NA_real_,
# specify the type of NA correctly
!!sym(qf_str) == two_badqfval[2] ~ NA_real_,
TRUE ~ !!sym(var_str))) %>%
# other QF code values are fine, keep data
select(all_of(c("tmp_idx", var_str, qf_str))) # keep sheetbar for joins
return(df)
}
# remove_864 <- function(qf_str, df){
#
#   # remove the QF at the end
#   var_str <- substr(qf_str, 1, nchar(qf_str)-2)
#
#   df <- df %>%
#     mutate(!!sym(var_str) := case_when(!!sym(qf_str) == 8 ~ NA_real_,
#                                        # use correct NA type and !!sym for NSE
#                                        !!sym(qf_str) == 64 ~ NA_real_,
#                                        TRUE ~ !!sym(var_str))) %>%
#                                        # remaining QF code values are fine
#     select(all_of(c("tmp_idx", var_str, qf_str))) # sheetbars for joining
#
# }
remove_A0_df <- bind_cols(lapply(qf_A0, replace_na_qf, water_df, c("A", "0"))) %>%
rename(tmp_idx = `tmp_idx...1`) %>%
select(!contains("..."))
remove_864_df <- bind_cols(lapply(qf_864, replace_na_qf, water_df, c(8, 64))) %>%
rename(tmp_idx = `tmp_idx...1`) %>%
select(!contains("..."))
fixedqf_df <- inner_join(remove_864_df, remove_A0_df, by = "tmp_idx") %>%
inner_join(water_df, by = c("tmp_idx", waterQF_var)) %>%
# this causes duplicate columns for water_var, which we do want
# because water_df has the old (wrong) values for water_var
select(!contains(".y")) %>% # remove the old (wrong) values from water_df
rename_with(~ gsub(".x", "", .), contains(".x")) %>% # rename
select(all_of(c(identifier_var, water_var, waterQF_var))) # reorder columns
return(fixedqf_df)
}
qfwater20 <- qfcodes_setNA(qf_A0, qf_864, water20,
identifier_var, water_var, waterQF_var)
