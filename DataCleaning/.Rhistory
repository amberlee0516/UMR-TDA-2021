<<<<<<< Updated upstream
data <- read_excel("C:/Users/cashe/OneDrive/Desktop/
Data Science/Mississippi River analysis/ltrm_water_dataexl.xlsx")
data <- read_excel("C:/Users/cashe/OneDrive/Desktop/Data Science/Mississippi River analysis/ltrm_water_dataexl.xlsx")
library(readxl)
data <- read_excel("C:/Users/cashe/OneDrive/Desktop/Data Science/Mississippi River analysis/ltrm_water_dataexl.xlsx")
library(readxl)
data <- read_excel("C:/Users/cashe/OneDrive/Desktop/Data Science/Mississippi River analysis/ltrm_water_dataexl.xlsx")
keep <- c('TP','TPQF','TN','TNQF','SS','SSQF',
'TURB','TURBQF','WDP',
'TEMP','TEMPQF','DO','DOQF','COND',
'CONDQF','VEL','VELQF','FLDEAST',
'FLDNORTH','PROJCD','FLDNUM','DATE',
'LOCATCD','STRATUM','CHLcal','SECCHI','SECCHIQF')
library(readxl)
data <- read_excel("C:/Users/cashe/OneDrive/Desktop/Data Science/Mississippi River analysis/ltrm_water_dataexl.xlsx")
keep <- c('TP','TPQF','TN','TNQF','SS','SSQF',
'TURB','TURBQF','WDP',
'TEMP','TEMPQF','DO','DOQF','COND',
'CONDQF','VEL','VELQF','FLDEAST',
'FLDNORTH','PROJCD','FLDNUM','DATE',
'LOCATCD','STRATUM','CHLcal','SECCHI','SECCHIQF')
data = data[,(names(data) %in% keep)]
print(dim(data))
print(hey)
cat("hey",6)
library(readxl)
data = read_excel("C:/Users/cashe/OneDrive/Desktop/Data Science/Mississippi River analysis/ltrm_water_dataexl.xlsx")
keep = c('TP','TPQF','TN','TNQF','SS','SSQF',
'TURB','TURBQF','WDP',
'TEMP','TEMPQF','DO','DOQF','COND',
'CONDQF','VEL','VELQF','FLDEAST',
'FLDNORTH','PROJCD','FLDNUM','DATE',
'LOCATCD','STRATUM','CHLcal','SECCHI','SECCHIQF')
cat("Before filtering:",dim(data))
data = data[,(names(data) %in% keep)]
cat("After filtering columns:",dim(data))
# Now filter sample design
library(readxl)
data = read_excel("C:/Users/cashe/OneDrive/Desktop/Data Science/Mississippi River analysis/ltrm_water_dataexl.xlsx")
keep = c('TP','TPQF','TN','TNQF','SS','SSQF',
'TURB','TURBQF','WDP',
'TEMP','TEMPQF','DO','DOQF','COND',
'CONDQF','VEL','VELQF','FLDEAST',
'FLDNORTH','PROJCD','FLDNUM','DATE',
'LOCATCD','STRATUM','CHLcal','SECCHI','SECCHIQF')
cat("Before filtering:",dim(data))
data = data[,(names(data) %in% keep)]
cat("After filtering columns:",dim(data))
# Now filter sample design
data = data[data$PROJCD=='-M',]
cat("After filtering sample design:",dim(data))
# Now filter pool 13
data = data[data$FLDNUM == 3,]
cat("After filtering pool 13:",dim(data))
library(readxl)
data = read_excel("C:/Users/cashe/OneDrive/Desktop/Data Science/Mississippi River analysis/ltrm_water_dataexl.xlsx")
keep = c('TP','TPQF','TN','TNQF','SS','SSQF',
'TURB','TURBQF','WDP',
'TEMP','TEMPQF','DO','DOQF','COND',
'CONDQF','VEL','VELQF','FLDEAST',
'FLDNORTH','PROJCD','FLDNUM','DATE',
'LOCATCD','STRATUM','CHLcal','SECCHI','SECCHIQF')
cat("Before filtering:",dim(data))
data = data[,(names(data) %in% keep)]
cat("After filtering columns:",dim(data))
# Now filter sample design
data = data[data$PROJCD=='M-',]
cat("After filtering sample design:",dim(data))
# Now filter pool 13
data = data[data$FLDNUM == 3,]
cat("After filtering pool 13:",dim(data))
data$DATE
data$DATE.year
format(data$DATE,format = "%Y")
data$YEAR = format(data$DATE,format = "%Y")
dim(data)
data
data$YEAR
data$DATE,data$YEAR
data[,c(DATE,YEAR)]
data[,c("DATE","YEAR")]
data[17000:17050,c("DATE","YEAR")]
library(readxl)
data = read_excel("C:/Users/cashe/OneDrive/Desktop/Data Science/Mississippi River analysis/ltrm_water_dataexl.xlsx")
keep = c('TP','TPQF','TN','TNQF','SS','SSQF',
'TURB','TURBQF','WDP',
'TEMP','TEMPQF','DO','DOQF','COND',
'CONDQF','VEL','VELQF','FLDEAST',
'FLDNORTH','PROJCD','FLDNUM','DATE',
'LOCATCD','STRATUM','CHLcal','SECCHI','SECCHIQF')
cat("Before filtering:",dim(data))
data = data[,(names(data) %in% keep)]
cat("After filtering columns:",dim(data))
# Now filter sample design
data = data[data$PROJCD=='M-',]
cat("After filtering sample design:",dim(data))
# Now filter pool 13
data = data[data$FLDNUM == 3,]
cat("After filtering pool 13:",dim(data))
# Now adding a year column
data$YEAR = format(data$DATE,format = "%Y")
cat("After adding year column:",dim(data))
# Now adding a time code column
data$TIMECODE = substr(data$LOCATCD,4,4)
cat("After adding a timecode column:",dim(data))
data[17000:17050,c("LOCATCD","TIMECODE")]
print(data[17000:17050,c("LOCATCD","TIMECODE")])
print(data[,c("LOCATCD","TIMECODE")])
library(readxl)
data = read_excel("C:/Users/cashe/OneDrive/Desktop/Data Science/Mississippi River analysis/ltrm_water_dataexl.xlsx")
keep = c('TP','TPQF','TN','TNQF','SS','SSQF',
'TURB','TURBQF','WDP',
'TEMP','TEMPQF','DO','DOQF','COND',
'CONDQF','VEL','VELQF','FLDEAST',
'FLDNORTH','PROJCD','FLDNUM','DATE',
'LOCATCD','STRATUM','CHLcal','SECCHI','SECCHIQF')
cat("Before filtering:",dim(data))
data = data[,(names(data) %in% keep)]
cat("After filtering columns:",dim(data))
# Now filter sample design
data = data[data$PROJCD=='M-',]
cat("After filtering sample design:",dim(data))
# Now filter pool 13
data = data[data$FLDNUM == 3,]
cat("After filtering pool 13:",dim(data))
# Now adding a year column
data$YEAR = format(data$DATE,format = "%Y")
cat("After adding year column:",dim(data))
# Now adding a time code column
data$TIMECODE = substr(data$LOCATCD,4,4)
cat("After adding a timecode column:",dim(data))
# Now filtering by backwater lakes
data = data[data$STRATUM==3,]
cat("After filtering by backwater lakes:",dim(data))
QFcols = c('TPQF','TNQF','SSQF','TURBQF','TEMPQF','DOQF','CONDQF','VELQF','SECCHIQF')
for (col in QFcols){
data = data[isnull(names(col)),]
}
cat("After filtering by non-blank QF codes:",dim(data))
library(readxl)
data = read_excel("C:/Users/cashe/OneDrive/Desktop/Data Science/Mississippi River analysis/ltrm_water_dataexl.xlsx")
keep = c('TP','TPQF','TN','TNQF','SS','SSQF',
'TURB','TURBQF','WDP',
'TEMP','TEMPQF','DO','DOQF','COND',
'CONDQF','VEL','VELQF','FLDEAST',
'FLDNORTH','PROJCD','FLDNUM','DATE',
'LOCATCD','STRATUM','CHLcal','SECCHI','SECCHIQF')
cat("Before filtering:",dim(data))
data = data[,(names(data) %in% keep)]
cat("After filtering columns:",dim(data))
# Now filter sample design
data = data[data$PROJCD=='M-',]
cat("After filtering sample design:",dim(data))
# Now filter pool 13
data = data[data$FLDNUM == 3,]
cat("After filtering pool 13:",dim(data))
# Now adding a year column
data$YEAR = format(data$DATE,format = "%Y")
cat("After adding year column:",dim(data))
# Now adding a time code column
data$TIMECODE = substr(data$LOCATCD,4,4)
cat("After adding a timecode column:",dim(data))
# Now filtering by backwater lakes
data = data[data$STRATUM==3,]
cat("After filtering by backwater lakes:",dim(data))
QFcols = c('TPQF','TNQF','SSQF','TURBQF','TEMPQF','DOQF','CONDQF','VELQF','SECCHIQF')
for (col in QFcols){
data = data[is.null(names(col)),]
}
cat("After filtering by non-blank QF codes:",dim(data))
library(readxl)
data = read_excel("C:/Users/cashe/OneDrive/Desktop/Data Science/Mississippi River analysis/ltrm_water_dataexl.xlsx")
keep = c('TP','TPQF','TN','TNQF','SS','SSQF',
'TURB','TURBQF','WDP',
'TEMP','TEMPQF','DO','DOQF','COND',
'CONDQF','VEL','VELQF','FLDEAST',
'FLDNORTH','PROJCD','FLDNUM','DATE',
'LOCATCD','STRATUM','CHLcal','SECCHI','SECCHIQF')
cat("Before filtering:",dim(data))
data = data[,(names(data) %in% keep)]
cat("After filtering columns:",dim(data))
# Now filter sample design
data = data[data$PROJCD=='M-',]
cat("After filtering sample design:",dim(data))
# Now filter pool 13
data = data[data$FLDNUM == 3,]
cat("After filtering pool 13:",dim(data))
# Now adding a year column
data$YEAR = format(data$DATE,format = "%Y")
cat("After adding year column:",dim(data))
# Now adding a time code column
data$TIMECODE = substr(data$LOCATCD,4,4)
cat("After adding a timecode column:",dim(data))
# Now filtering by backwater lakes
data = data[data$STRATUM==3,]
cat("After filtering by backwater lakes:",dim(data))
QFcols = c('TPQF','TNQF','SSQF','TURBQF','TEMPQF','DOQF','CONDQF','VELQF','SECCHIQF')
for (col in QFcols){
data = data[is.null(data[col]),]
}
cat("After filtering by non-blank QF codes:",dim(data))
col
library(readxl)
data = read_excel("C:/Users/cashe/OneDrive/Desktop/Data Science/Mississippi River analysis/ltrm_water_dataexl.xlsx")
keep = c('TP','TPQF','TN','TNQF','SS','SSQF',
'TURB','TURBQF','WDP',
'TEMP','TEMPQF','DO','DOQF','COND',
'CONDQF','VEL','VELQF','FLDEAST',
'FLDNORTH','PROJCD','FLDNUM','DATE',
'LOCATCD','STRATUM','CHLcal','SECCHI','SECCHIQF')
cat("Before filtering:",dim(data))
data = data[,(names(data) %in% keep)]
cat("After filtering columns:",dim(data))
# Now filter sample design
data = data[data$PROJCD=='M-',]
cat("After filtering sample design:",dim(data))
# Now filter pool 13
data = data[data$FLDNUM == 3,]
cat("After filtering pool 13:",dim(data))
# Now adding a year column
data$YEAR = format(data$DATE,format = "%Y")
cat("After adding year column:",dim(data))
# Now adding a time code column
data$TIMECODE = substr(data$LOCATCD,4,4)
cat("After adding a timecode column:",dim(data))
# Now filtering by backwater lakes
data = data[data$STRATUM==3,]
cat("After filtering by backwater lakes:",dim(data))
QFcols = c('TPQF','TNQF','SSQF','TURBQF','TEMPQF','DOQF','CONDQF','VELQF','SECCHIQF')
for (col in QFcols){
data = data[(is.na(data[col]) | data[col]==""), ]
}
cat("After filtering by non-blank QF codes:",dim(data))
library(readxl)
data = read_excel("C:/Users/cashe/OneDrive/Desktop/Data Science/Mississippi River analysis/ltrm_water_dataexl.xlsx")
keep = c('TP','TPQF','TN','TNQF','SS','SSQF',
'TURB','TURBQF','WDP',
'TEMP','TEMPQF','DO','DOQF','COND',
'CONDQF','VEL','VELQF','FLDEAST',
'FLDNORTH','PROJCD','FLDNUM','DATE',
'LOCATCD','STRATUM','CHLcal','SECCHI','SECCHIQF')
cat("Before filtering:",dim(data))
data = data[,(names(data) %in% keep)]
cat("After filtering columns:",dim(data))
# Now filter sample design
data = data[data$PROJCD=='M-',]
cat("After filtering sample design:",dim(data))
# Now filter pool 13
data = data[data$FLDNUM == 3,]
cat("After filtering pool 13:",dim(data))
# Now adding a year column
data$YEAR = format(data$DATE,format = "%Y")
cat("After adding year column:",dim(data))
# Now adding a time code column
data$TIMECODE = substr(data$LOCATCD,4,4)
cat("After adding a timecode column:",dim(data))
# Now filtering by backwater lakes
data = data[data$STRATUM==3,]
cat("After filtering by backwater lakes:",dim(data))
QFcols = c('TPQF','TNQF','SSQF','TURBQF','TEMPQF','DOQF','CONDQF','VELQF','SECCHIQF')
for (col in QFcols){
data = data[(is.na(data[col])), ]
}
cat("After filtering by non-blank QF codes:",dim(data))
library(readxl)
data = read_excel("C:/Users/cashe/OneDrive/Desktop/Data Science/Mississippi River analysis/ltrm_water_dataexl.xlsx")
keep = c('TP','TPQF','TN','TNQF','SS','SSQF',
'TURB','TURBQF','WDP',
'TEMP','TEMPQF','DO','DOQF','COND',
'CONDQF','VEL','VELQF','FLDEAST',
'FLDNORTH','PROJCD','FLDNUM','DATE',
'LOCATCD','STRATUM','CHLcal','SECCHI','SECCHIQF')
cat("Before filtering:",dim(data))
data = data[,(names(data) %in% keep)]
cat("After filtering columns:",dim(data))
# Now filter sample design
data = data[data$PROJCD=='M-',]
cat("After filtering sample design:",dim(data))
# Now filter pool 13
data = data[data$FLDNUM == 3,]
cat("After filtering pool 13:",dim(data))
# Now adding a year column
data$YEAR = format(data$DATE,format = "%Y")
cat("After adding year column:",dim(data))
# Now adding a time code column
data$TIMECODE = substr(data$LOCATCD,4,4)
cat("After adding a timecode column:",dim(data))
# Now filtering by backwater lakes
data = data[data$STRATUM==3,]
cat("After filtering by backwater lakes:",dim(data))
QFcols = c('TPQF','TNQF','SSQF','TURBQF','TEMPQF','DOQF','CONDQF','VELQF','SECCHIQF')
for (col in QFcols){
data = data[(is.na(data[col])), ]
}
cat("After filtering by non-blank QF codes:",dim(data))
drop = c('PROJCD','FLDEAST','FLDNORTH','TPQF','TNQF','SSQF','TURBQF','TEMPQF','DOQF',
'CONDQF','VELQF','SECCHIQF')
data = data[,!(names(data) %in% drop)]
cat("After filtering empty columns:",dim(data))
continuousv = c('TP','TN','TEMP','DO','TURB','COND','VEL','SS','WDP','CHLcal','SECCHI')
for (col in continuousv){
data = data[!(is.na(data[col])), ]
}
cat("After filtering rows with empty entries:",dim(data))
write.csv(data,"C:\\Users\\cashe\\OneDrive\\Desktop\\Data Science\\Mississippi River analysis\\Cleaned_dataR_12-29-20.csv", row.names = FALSE)
View(data)
rm(list = ls())
demo()
3+4
library(tidyverse)
install.packages("tidyverse")
library(tidyverse)
ltrm <- read_csv("ltrm_fish_data.csv")
ltrm <- read_csv("C:\Users\cashe\OneDrive\Desktop\Data Science\Mississippi River analysis\Code\R\ltrm_fish_data.csv")
ltrm <- read_csv("C:\\Users\\cashe\\OneDrive\\Desktop\\Data Science\\Mississippi River analysis\\Code\\R\\ltrm_fish_data.csv")
ltrm
names(ltrm)
ltrm[1,3]
ltrm[1]
rows(ltrm)
row(ltrm)
help("rows")
help(row())
help("row()")
row.names(ltrm)
ltrm["temp"]
ltrm$temp
row(ltrm$temp)
# Look structure of the object
str(ltrm)
names(ltrm)
ltrm["catch"]
ltrm$catch
ggplot(data = ltrm) + geom_point(mapping = aes(x = length, y = weight, color = vegd))
# Visualize
ggplot(data = ltrm)
+ geom_point(mapping = aes(x = length, y = weight,color = vegd))
ggplot(data = ltrm) + geom_point(mapping = aes(x = length, y = weight,color = vegd))
unique(ltrm$fishcode)
ltrm_gzsd <- ltrm %>% filter(fishcode == "GZSD")
ggplot(data = ltrm_gzsd) + geom_point(mapping = aes(x = length, y = weight,color = vegd))
ggplot(data = ltrm)
ggplot(data = ltrm)
geom_point(mapping = aes(x = length, y = weight,color = vegd))
ltrm_gzsd <- ltrm %>% filter(fishcode == "GZSD" & catch > 2)
ggplot(data = ltrm_gzsd) + geom_point(mapping = aes(x = length, y = weight,color = vegd))
ltrm_gzsd <- ltrm %>% filter(fishcode == "GZSD" & catch > 1)
ggplot(data = ltrm_gzsd) + geom_point(mapping = aes(x = length, y = weight,color = vegd))
ltrm_gzsd <- ltrm %>% filter(fishcode == "GZSD")
ltrm_gzsd <- ltrm %>% filter(fishcode == "GZSD")
ggplot(data = ltrm_gzsd) + geom_point(mapping = aes(x = length, y = weight,color = vegd))
ltrm %>%
filter(fishcode == "GZSD") %>%
ggplot() +
geom_point(mapping = aes(x = length, y = weight,color = vegd))
# Convert date into new format
ltrm$fdate <- as.Date(ltrm$fdate, "%m/%d/%Y")
# Then pull year and add it as a new column
ltrm <- ltrm %>% mutate(year = year(fdate))
library(lubridate)
# Convert date into new format
ltrm$fdate <- as.Date(ltrm$fdate, "%m/%d/%Y")
# Then pull year and add it as a new column
ltrm <- ltrm %>% mutate(year = year(fdate))
ltrm %>%
filter(year == "2014") %>%
ggplot(., aes(x = length)) +
geom_histogram()
ltrm %>%
filter(year == "2014" & fishcode = "GZSD") %>%
ggplot(., aes(x = length)) +
geom_histogram()
ltrm %>%
filter(year == "2014" & fishcode = "GZSD") %>%
ggplot(., aes(x = length)) +
geom_histogram()
ltrm %>%
filter(year == "2014" & fishcode = "GZSD") %>%
ggplot(aes(x = length)) +
geom_histogram()
ltrm %>%
filter(year == "2014" & fishcode == "GZSD") %>%
ggplot(aes(x = length)) +
geom_histogram()
ltrm %>%
filter(year == "2014" & fishcode == "GZSD" || fishcode == "CARP") %>%
ggplot(aes(x = length)) +
geom_histogram()
ltrm %>%
filter(year == "2014" & (fishcode == "GZSD" || fishcode == "CARP")) %>%
ggplot(aes(x = length)) +
geom_histogram()
ltrm %>%
filter(year == "2014" & fishcode == "CARP") %>%
ggplot(aes(x = length)) +
geom_histogram()
ltrm %>%
filter(year == "2014" & fishcode == "GZSD" | fishcode == "CARP") %>%
ggplot(aes(x = length)) +
geom_histogram()
ltrm %>%
filter(year == "2014" & (fishcode == "GZSD" | fishcode == "CARP")) %>%
ggplot(aes(x = length)) +
geom_histogram()
ltrm %>%
filter((year == "2014" & fishcode == "GZSD") | fishcode == "CARP") %>%
ggplot(aes(x = length)) +
geom_histogram()
ltrm %>%
filter((year == "2014" & fishcode == "GZSD") | fishcode == "CARP") %>%
ggplot(aes(x = length)) +
geom_histogram(aes(y = density),bins = 50 +
labs(x = "length in mm",
y = "length frequency",
title = "Length Frequency",
subtitle = "Year: 2014"))
ltrm %>%
filter((year == "2014" & fishcode == "GZSD") | fishcode == "CARP") %>%
ggplot(aes(x = length)) +
geom_histogram(aes(y = ..density..),bins = 50 +
labs(x = "length in mm",
y = "length frequency",
title = "Length Frequency",
subtitle = "Year: 2014"))
ltrm %>%
filter((year == "2014" & fishcode == "GZSD") | fishcode == "CARP") %>%
ggplot(aes(x = length)) +
geom_histogram(aes(y = ..density..),bins = 50) +
labs(x = "length in mm",
y = "length frequency",
title = "Length Frequency",
subtitle = "Year: 2014")
ltrm %>%
filter((year == "2014" & fishcode == "GZSD") | fishcode == "CARP") %>%
ggplot(aes(x = length)) +
geom_histogram(aes(y = density),bins = 50) +
labs(x = "length in mm",
y = "length frequency",
title = "Length Frequency",
subtitle = "Year: 2014")
ltrm %>%
filter((year == "2014" & fishcode == "GZSD") | fishcode == "CARP") %>%
ggplot(aes(x = length)) +
geom_histogram(aes(y = .density.),bins = 50) +
labs(x = "length in mm",
y = "length frequency",
title = "Length Frequency",
subtitle = "Year: 2014")
ltrm %>%
filter((year == "2014" & fishcode == "GZSD") | fishcode == "CARP") %>%
ggplot(aes(x = length)) +
geom_histogram(aes(y = ..density..),bins = 50) +
labs(x = "length in mm",
y = "length frequency",
title = "Length Frequency",
subtitle = "Year: 2014")
ltrm <- read_csv("C:\\Users\\cashe\\OneDrive\\Desktop\\Data Science\\Mississippi River analysis\\Code\\R\\ltrm_fish_data.csv")
library(lubridate)
ltrm <- read_csv("C:\\Users\\cashe\\OneDrive\\Desktop\\Data Science\\Mississippi River analysis\\Code\\R\\ltrm_fish_data.csv")
# Load data
ltrm <- read.csv("C:\\Users\\cashe\\OneDrive\\Desktop\\Data Science\\Mississippi River analysis\\Code\\R\\ltrm_fish_data.csv")
ltrm
ltrm["catch"]
colnames(ltrm)
ltrm["catch","barcode"]
ltrm[c("catch","barcode")]
mtcars
cols <- c('drat','wt')
mtcars %>% filter(cols < 3.5)
library(dplyr)
mtcars %>% filter(cols < 3.5)
mtcars %>% filter(wt < 3.5)
mtcars %>% filter(vars(col) < 3.5 )
mtcars %>% filter(vars(col),any_vars(. <3.5) )
mtcars %>% filter(vars(col),any_vars( . <3.5) )
=======
arrange(-count) # 147130
# Filter for the sheetbars that have multiple rows
sheetbar_dups <- sheetbar_counts %>% filter(count > 1) # 33
data_dups <- data[data$SHEETBAR %in% sheetbar_dups$SHEETBAR, ] # 74
# Set aside the rows with sheetbars that only occur once
water_cleaned <- data[!(data$SHEETBAR %in% sheetbar_dups$SHEETBAR), ] %>%
select(all_of(c(identifier_var, water_var)))
# Average the continuous vars and re-merge the identifiers to the collapsed rows
data_dups_ids <- data_dups[identifier_var]
# Find the mean of the continuous variables
data_dups <- aggregate(data_dups[water_var],
by = list(data_dups$SHEETBAR),
FUN = mean,
na.rm = TRUE,
na.action = na.pass) %>%
rename('SHEETBAR' = 'Group.1')
# Rounds the data frame
is.num <-sapply(data_dups, is.numeric)
data_dups[is.num] <- lapply(data_dups[is.num], round, 2)
# Replace NaN with Na to be consistent with the rest of the data
data_dups[is.na(data_dups)] <- NA
# Merge the ids back to the water_vars
data_dups <- unique(merge(data_dups, data_dups_ids, by = 'SHEETBAR'))
# Add the collapsed rows to the cleaned data
water_cleaned <- rbind(water_cleaned, data_dups)
return(water_cleaned)
}
qfwater20 <- row_collapse(qfwater20, water_var, identifier_var)
>>>>>>> Stashed changes
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
library(tidyverse)
library(ggplot2)
library(lubridate)
library(corrplot)
library(RColorBrewer)
library(kableExtra)
<<<<<<< Updated upstream
setwd("~/GitHub/UMR-TDA-2021/DataCleaning")
=======
>>>>>>> Stashed changes
# set working directory to source file location
# setwd("~/Documents/GitHub/UMR-TDA-2021")
water20 <- read.csv(file = "../LTRM data/ltrm_water_data_lat_long.csv")
water_var <- c('TN','TP','TEMP','DO','TURB',
'COND','VEL','SS','WDP','CHLcal','SECCHI')
waterQF_var <- paste(water_var, "QF", sep = "")
identifier_var <- c('SHEETBAR', 'DATE', 'LATITUDE', 'LONGITUDE', 'FLDNUM', 'STRATUM', 'LOCATCD')
waterQF_var <- waterQF_var[waterQF_var != "WDPQF" &
waterQF_var != "CHLcalQF"]
waterQF_var <- c(waterQF_var, "ZMAXQF")
duplicates <- water20 %>%
select(SHEETBAR) %>%
<<<<<<< Updated upstream
group_by(SHEETBAR) %>%
summarize(count = n())
duplicates %>% head()
count_n_duplicates <- function(n, df) {
return((df %>% filter(count == n) %>% dim())[1]/156474) #156k distinct sheetbars
}
=======
group_by(SHEETBAR) %>%
summarize(count = n())
duplicates %>% head()
count_n_duplicates <- function(n, df) {
return((df %>% filter(count == n) %>% dim())[1]/156474) #156k distinct sheetbars
}
count_duplicates <- data.frame(proportion = sapply(1:8, count_n_duplicates,
duplicates),
number_duplicates = 1:8)
ggplot(count_duplicates, aes(x = number_duplicates, y = proportion)) +
geom_bar(stat = "identity")
count_duplicates %>% kbl(booktabs = T)
water20 %>%
filter(SHEETBAR == -4604347) %>%
select(SHEETBAR, Z, CALCZCD, DO, TP, TN) %>%
kbl(booktabs = T) %>%
kable_styling(latex_options = "striped")
water20 %>%
filter(SHEETBAR == 41015929	) %>%
select(SHEETBAR, Z, CALCZCD, DO, TP, TN) %>%
kbl(booktabs = T) %>%
kable_styling(latex_options = "striped")
table(water20$CALCZCD)
sapply(water20 %>%
filter(CALCZCD == "SF") %>%
select(all_of(water_var)),
function(x) sum(is.na(x)/length(x)))
(water20 %>%
filter(CALCZCD == "") %>%
dim())[1]
sapply((water20 %>%
filter(CALCZCD == "") %>%
select(all_of(water_var))), function(x) sum(is.na(x)/length(x)))
table(water20$SITETYPE)
water20 <- water20 %>%
filter(CALCZCD == "SF") %>%
filter(SITETYPE != 2) %>%
select(all_of(c(identifier_var, water_var, waterQF_var)))
qf_A0 <- c("TURBQF", "TEMPQF", "DOQF", "VELQF", "ZMAXQF",
"SECCHIQF", "CONDQF")
qf_864 <- c("TNQF", "TPQF", "SSQF")
water20$tmp_idx <- 1:nrow(water20)
qfcodes_setNA <- function(qf_A0, qf_864, water_df,
identifier_var, water_var, waterQF_var){
# qf_A0 is a character vector of the variable qf names for which
# A, 0 qf codes are bad
# qf_864 is a character vector of the variable qf names for which
# 8, 64 qf codes are bad
# water_df is the entire water_df
# last 3 variables are just for naming
replace_na_qf <- function(qf_str, df, two_badqfval){
# remove QF at the end of qf_str
var_str <- substr(qf_str, 1, nchar(qf_str)-2)
if (var_str == "ZMAX") { var_str <- "WDP"}
df <- df %>%
# !!sym is for non standard evaluation
mutate(!!sym(var_str) := case_when(!!sym(qf_str) == two_badqfval[1] ~ NA_real_,
# specify the type of NA correctly
!!sym(qf_str) == two_badqfval[2] ~ NA_real_,
TRUE ~ !!sym(var_str))) %>%
# other QF code values are fine, keep data
select(all_of(c("tmp_idx", var_str, qf_str))) # keep sheetbar for joins
return(df)
}
# remove_864 <- function(qf_str, df){
#
#   # remove the QF at the end
#   var_str <- substr(qf_str, 1, nchar(qf_str)-2)
#
#   df <- df %>%
#     mutate(!!sym(var_str) := case_when(!!sym(qf_str) == 8 ~ NA_real_,
#                                        # use correct NA type and !!sym for NSE
#                                        !!sym(qf_str) == 64 ~ NA_real_,
#                                        TRUE ~ !!sym(var_str))) %>%
#                                        # remaining QF code values are fine
#     select(all_of(c("tmp_idx", var_str, qf_str))) # sheetbars for joining
#
# }
remove_A0_df <- bind_cols(lapply(qf_A0, replace_na_qf, water_df, c("A", "0"))) %>%
rename(tmp_idx = `tmp_idx...1`) %>%
select(!contains("..."))
remove_864_df <- bind_cols(lapply(qf_864, replace_na_qf, water_df, c(8, 64))) %>%
rename(tmp_idx = `tmp_idx...1`) %>%
select(!contains("..."))
fixedqf_df <- inner_join(remove_864_df, remove_A0_df, by = "tmp_idx") %>%
inner_join(water_df, by = c("tmp_idx", waterQF_var)) %>%
# this causes duplicate columns for water_var, which we do want
# because water_df has the old (wrong) values for water_var
select(!contains(".y")) %>% # remove the old (wrong) values from water_df
rename_with(~ gsub(".x", "", .), contains(".x")) %>% # rename
select(all_of(c(identifier_var, water_var, waterQF_var))) # reorder columns
return(fixedqf_df)
}
qfwater20 <- qfcodes_setNA(qf_A0, qf_864, water20,
identifier_var, water_var, waterQF_var)
qfcodes_check <- function(qf_str, df, two_badqfval){
var_str <- substr(qf_str, 1, nchar(qf_str)-2)
if (var_str == "ZMAX") {var_str = "WDP"}
badqf_length <- df %>%
filter(!!sym(qf_str) == two_badqfval[1] | !!sym(qf_str) == two_badqfval[2]) %>%
pull(!!sym(var_str)) %>%
length()
badqf_sum <- df %>%
filter(!!sym(qf_str) == two_badqfval[1] | !!sym(qf_str) == two_badqfval[2]) %>%
pull(!!sym(var_str)) %>%
is.na(.) %>%
sum()
if (badqf_length != badqf_sum) {return(qf_str)}
return(badqf_length == badqf_sum)
}
c(unlist(lapply(qf_A0, qfcodes_check, qfwater20, c("A", "0"))),
unlist(lapply(qf_864, qfcodes_check, qfwater20, c(8, 64))))
# Collapse the rows with the same SHEETBAR code
row_collapse <- function(data, water_var, identifier_var) {
# Count how many rows each sheetbar has
sheetbar_counts <- data %>%
group_by(SHEETBAR) %>%
dplyr::summarize(count = n()) %>%
arrange(-count) # 147130
# Filter for the sheetbars that have multiple rows
sheetbar_dups <- sheetbar_counts %>% filter(count > 1) # 33
data_dups <- data[data$SHEETBAR %in% sheetbar_dups$SHEETBAR, ] # 74
# Set aside the rows with sheetbars that only occur once
water_cleaned <- data[!(data$SHEETBAR %in% sheetbar_dups$SHEETBAR), ] %>%
select(all_of(c(identifier_var, water_var)))
# Average the continuous vars and re-merge the identifiers to the collapsed rows
data_dups_ids <- data_dups[identifier_var]
# Find the mean of the continuous variables
data_dups <- aggregate(data_dups[water_var],
by = list(data_dups$SHEETBAR),
FUN = mean,
na.rm = TRUE,
na.action = na.pass) %>%
rename('SHEETBAR' = 'Group.1')
# Rounds the data frame
is.num <-sapply(data_dups, is.numeric)
data_dups[is.num] <- lapply(data_dups[is.num], round, 2)
# Replace NaN with Na to be consistent with the rest of the data
data_dups[is.na(data_dups)] <- NA
# Merge the ids back to the water_vars
data_dups <- unique(merge(data_dups, data_dups_ids, by = 'SHEETBAR'))
# Add the collapsed rows to the cleaned data
water_cleaned <- rbind(water_cleaned, data_dups)
return(water_cleaned)
}
# Just continuous vars and identifiers (remove QF columns)
qfwater20 <- qfwater20[c(water_var, identifier_var)]
qfwater20 <- row_collapse(qfwater20, water_var, identifier_var)
tmp <- replace(qfwater20[water_var[water_var != "TEMP"]],
qfwater20[water_var[water_var != "TEMP"]] < 0, NA)
lapply(water_var[!(water_var %in% c("WDP", "CHLcal"))], function(var, df)
df %>%
select(all_of(c(var, paste(var, "QF", sep = "")))) %>%
filter(!!sym(var) < 0) %>%
mutate(var = paste(var)) %>%
ggplot(aes(x = !!sym(var))) +
geom_histogram(aes(fill = !!sym(paste(var, "QF", sep = ""))),
bins = 10), water20)
# lapply(water_var, function(var, df)
#   df %>%
#     select(var) %>%
#     filter(!!sym(var) < 0) %>%
#     mutate(var = paste(var)), qfwater20)
#
#
# lapply(water_var, function(var, df)
#   df %>%
#     select(var) %>%
#     filter(!!sym(var) < 0) %>%
#     mutate(var = paste(var)), tmp) # this checks that we successfully set negative values to 0
write.csv(tmp, "../LTRM data/water_data_qfneg.csv", row.names = FALSE)
View(tmp)
replace(qfwater20[water_var[water_var != "TEMP"]],
qfwater20[water_var[water_var != "TEMP"]] < 0, NA)
qfwater20[water_var[water_var != "TEMP"]]
tmp <- row_collapse(qfwater20[c(water_var, identifier_var)],
water_var, identifier_var)
tmp <- row_collapse(qfwater20[c(water_var, identifier_var)],
water_var, identifier_var)
qfwater20 <- row_collapse(qfwater20[c(water_var, identifier_var)],
water_var, identifier_var)
# Collapse the rows with the same SHEETBAR code
row_collapse <- function(data, water_var, identifier_var) {
# Count how many rows each sheetbar has
sheetbar_counts <- data %>%
group_by(SHEETBAR) %>%
dplyr::summarize(count = n()) %>%
arrange(-count) # 147130
# Filter for the sheetbars that have multiple rows
sheetbar_dups <- sheetbar_counts %>% filter(count > 1) # 33
data_dups <- data[data$SHEETBAR %in% sheetbar_dups$SHEETBAR, ] # 74
# Set aside the rows with sheetbars that only occur once
water_cleaned <- data[!(data$SHEETBAR %in% sheetbar_dups$SHEETBAR), ] %>%
select(all_of(c(identifier_var, water_var)))
# Average the continuous vars and re-merge the identifiers to the collapsed rows
data_dups_ids <- data_dups[identifier_var]
# Find the mean of the continuous variables
data_dups <- aggregate(data_dups[water_var],
by = list(data_dups$SHEETBAR),
FUN = mean,
na.rm = TRUE,
na.action = na.pass) %>%
rename('SHEETBAR' = 'Group.1')
# Rounds the data frame
is.num <-sapply(data_dups, is.numeric)
data_dups[is.num] <- lapply(data_dups[is.num], round, 2)
# Replace NaN with Na to be consistent with the rest of the data
data_dups[is.na(data_dups)] <- NA
# Merge the ids back to the water_vars
data_dups <- unique(merge(data_dups, data_dups_ids, by = 'SHEETBAR'))
# Add the collapsed rows to the cleaned data
water_cleaned <- rbind(water_cleaned, data_dups)
return(water_cleaned)
}
qfwater20 <- row_collapse(qfwater20[c(water_var, identifier_var)],
water_var, identifier_var)
tmp <- qfwater20 %>%
mutate(across(water_var[water_var != "TEMP"]), ~ replace(., which(.<0), NA))
qfwater20 %>%
mutate(across(water_var[water_var != "TEMP"]), NA)
qfwater20 %>%
mutate(across(water_var[water_var != "TEMP"]), ifelse(. < 0, NA, .))
qfwater20 %>%
mutate(across(water_var[water_var != "TEMP"]), ~ ifelse(. < 0, NA, .))
qfwater20 %>%
mutate(across(water_var[water_var != "TEMP"], ~ ifelse(. < 0, NA, .)))
tmp <- qfwater20 %>%
mutate(across(water_var[water_var != "TEMP"], ~ ifelse(. < 0, NA, .)))
tmp$TP[tmp$TP < 0]
write.csv(tmp, "../LTRM data/water_data_qfneg.csv", row.names = FALSE)
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
library(tidyverse)
library(ggplot2)
library(lubridate)
library(corrplot)
library(RColorBrewer)
library(kableExtra)
# set working directory to source file location
# setwd("~/Documents/GitHub/UMR-TDA-2021")
water20 <- read.csv(file = "../LTRM data/ltrm_water_data_lat_long.csv")
water_var <- c('TN','TP','TEMP','DO','TURB',
'COND','VEL','SS','WDP','CHLcal','SECCHI')
waterQF_var <- paste(water_var, "QF", sep = "")
identifier_var <- c('SHEETBAR', 'DATE', 'LATITUDE', 'LONGITUDE', 'FLDNUM', 'STRATUM', 'LOCATCD')
waterQF_var <- waterQF_var[waterQF_var != "WDPQF" &
waterQF_var != "CHLcalQF"]
waterQF_var <- c(waterQF_var, "ZMAXQF")
duplicates <- water20 %>%
select(SHEETBAR) %>%
group_by(SHEETBAR) %>%
summarize(count = n())
duplicates %>% head()
count_n_duplicates <- function(n, df) {
return((df %>% filter(count == n) %>% dim())[1]/156474) #156k distinct sheetbars
}
>>>>>>> Stashed changes
count_duplicates <- data.frame(proportion = sapply(1:8, count_n_duplicates,
duplicates),
number_duplicates = 1:8)
ggplot(count_duplicates, aes(x = number_duplicates, y = proportion)) +
geom_bar(stat = "identity")
count_duplicates %>% kbl(booktabs = T)
water20 %>%
filter(SHEETBAR == -4604347) %>%
select(SHEETBAR, Z, CALCZCD, DO, TP, TN) %>%
kbl(booktabs = T) %>%
kable_styling(latex_options = "striped")
<<<<<<< Updated upstream
=======
water20 %>%
filter(SHEETBAR == 41015929	) %>%
select(SHEETBAR, Z, CALCZCD, DO, TP, TN) %>%
kbl(booktabs = T) %>%
kable_styling(latex_options = "striped")
table(water20$CALCZCD)
sapply(water20 %>%
filter(CALCZCD == "SF") %>%
select(all_of(water_var)),
function(x) sum(is.na(x)/length(x)))
(water20 %>%
filter(CALCZCD == "") %>%
dim())[1]
sapply((water20 %>%
filter(CALCZCD == "") %>%
select(all_of(water_var))), function(x) sum(is.na(x)/length(x)))
table(water20$SITETYPE)
water20 <- water20 %>%
filter(CALCZCD == "SF") %>%
filter(SITETYPE != 2) %>%
select(all_of(c(identifier_var, water_var, waterQF_var)))
qf_A0 <- c("TURBQF", "TEMPQF", "DOQF", "VELQF", "ZMAXQF",
"SECCHIQF", "CONDQF")
qf_864 <- c("TNQF", "TPQF", "SSQF")
water20$tmp_idx <- 1:nrow(water20)
qfcodes_setNA <- function(qf_A0, qf_864, water_df,
identifier_var, water_var, waterQF_var){
# qf_A0 is a character vector of the variable qf names for which
# A, 0 qf codes are bad
# qf_864 is a character vector of the variable qf names for which
# 8, 64 qf codes are bad
# water_df is the entire water_df
# last 3 variables are just for naming
replace_na_qf <- function(qf_str, df, two_badqfval){
# remove QF at the end of qf_str
var_str <- substr(qf_str, 1, nchar(qf_str)-2)
if (var_str == "ZMAX") { var_str <- "WDP"}
df <- df %>%
# !!sym is for non standard evaluation
mutate(!!sym(var_str) := case_when(!!sym(qf_str) == two_badqfval[1] ~ NA_real_,
# specify the type of NA correctly
!!sym(qf_str) == two_badqfval[2] ~ NA_real_,
TRUE ~ !!sym(var_str))) %>%
# other QF code values are fine, keep data
select(all_of(c("tmp_idx", var_str, qf_str))) # keep sheetbar for joins
return(df)
}
# remove_864 <- function(qf_str, df){
#
#   # remove the QF at the end
#   var_str <- substr(qf_str, 1, nchar(qf_str)-2)
#
#   df <- df %>%
#     mutate(!!sym(var_str) := case_when(!!sym(qf_str) == 8 ~ NA_real_,
#                                        # use correct NA type and !!sym for NSE
#                                        !!sym(qf_str) == 64 ~ NA_real_,
#                                        TRUE ~ !!sym(var_str))) %>%
#                                        # remaining QF code values are fine
#     select(all_of(c("tmp_idx", var_str, qf_str))) # sheetbars for joining
#
# }
remove_A0_df <- bind_cols(lapply(qf_A0, replace_na_qf, water_df, c("A", "0"))) %>%
rename(tmp_idx = `tmp_idx...1`) %>%
select(!contains("..."))
remove_864_df <- bind_cols(lapply(qf_864, replace_na_qf, water_df, c(8, 64))) %>%
rename(tmp_idx = `tmp_idx...1`) %>%
select(!contains("..."))
fixedqf_df <- inner_join(remove_864_df, remove_A0_df, by = "tmp_idx") %>%
inner_join(water_df, by = c("tmp_idx", waterQF_var)) %>%
# this causes duplicate columns for water_var, which we do want
# because water_df has the old (wrong) values for water_var
select(!contains(".y")) %>% # remove the old (wrong) values from water_df
rename_with(~ gsub(".x", "", .), contains(".x")) %>% # rename
select(all_of(c(identifier_var, water_var, waterQF_var))) # reorder columns
return(fixedqf_df)
}
qfwater20 <- qfcodes_setNA(qf_A0, qf_864, water20,
identifier_var, water_var, waterQF_var)
qfcodes_check <- function(qf_str, df, two_badqfval){
var_str <- substr(qf_str, 1, nchar(qf_str)-2)
if (var_str == "ZMAX") {var_str = "WDP"}
badqf_length <- df %>%
filter(!!sym(qf_str) == two_badqfval[1] | !!sym(qf_str) == two_badqfval[2]) %>%
pull(!!sym(var_str)) %>%
length()
badqf_sum <- df %>%
filter(!!sym(qf_str) == two_badqfval[1] | !!sym(qf_str) == two_badqfval[2]) %>%
pull(!!sym(var_str)) %>%
is.na(.) %>%
sum()
if (badqf_length != badqf_sum) {return(qf_str)}
return(badqf_length == badqf_sum)
}
c(unlist(lapply(qf_A0, qfcodes_check, qfwater20, c("A", "0"))),
unlist(lapply(qf_864, qfcodes_check, qfwater20, c(8, 64))))
# Collapse the rows with the same SHEETBAR code
row_collapse <- function(data, water_var, identifier_var) {
# Count how many rows each sheetbar has
sheetbar_counts <- data %>%
group_by(SHEETBAR) %>%
dplyr::summarize(count = n()) %>%
arrange(-count) # 147130
# Filter for the sheetbars that have multiple rows
sheetbar_dups <- sheetbar_counts %>% filter(count > 1) # 33
data_dups <- data[data$SHEETBAR %in% sheetbar_dups$SHEETBAR, ] # 74
# Set aside the rows with sheetbars that only occur once
water_cleaned <- data[!(data$SHEETBAR %in% sheetbar_dups$SHEETBAR), ] %>%
select(all_of(c(identifier_var, water_var)))
# Average the continuous vars and re-merge the identifiers to the collapsed rows
data_dups_ids <- data_dups[identifier_var]
# Find the mean of the continuous variables
data_dups <- aggregate(data_dups[water_var],
by = list(data_dups$SHEETBAR),
FUN = mean,
na.rm = TRUE,
na.action = na.pass) %>%
rename('SHEETBAR' = 'Group.1')
# Rounds the data frame
is.num <-sapply(data_dups, is.numeric)
data_dups[is.num] <- lapply(data_dups[is.num], round, 2)
# Replace NaN with Na to be consistent with the rest of the data
data_dups[is.na(data_dups)] <- NA
# Merge the ids back to the water_vars
data_dups <- unique(merge(data_dups, data_dups_ids, by = 'SHEETBAR'))
# Add the collapsed rows to the cleaned data
water_cleaned <- rbind(water_cleaned, data_dups)
return(water_cleaned)
}
# Just continuous vars and identifiers (remove QF columns)
qfwater20 <- row_collapse(qfwater20[c(water_var, identifier_var)],
water_var, identifier_var)
tmp <- qfwater20 %>%
mutate(across(water_var[water_var != "TEMP"], ~ ifelse(. < 0, NA, .)))
lapply(water_var[!(water_var %in% c("WDP", "CHLcal"))], function(var, df)
df %>%
select(all_of(c(var, paste(var, "QF", sep = "")))) %>%
filter(!!sym(var) < 0) %>%
mutate(var = paste(var)) %>%
ggplot(aes(x = !!sym(var))) +
geom_histogram(aes(fill = !!sym(paste(var, "QF", sep = ""))),
bins = 10), water20)
# lapply(water_var, function(var, df)
#   df %>%
#     select(var) %>%
#     filter(!!sym(var) < 0) %>%
#     mutate(var = paste(var)), qfwater20)
#
#
# lapply(water_var, function(var, df)
#   df %>%
#     select(var) %>%
#     filter(!!sym(var) < 0) %>%
#     mutate(var = paste(var)), tmp) # this checks that we successfully set negative values to 0
write.csv(tmp, "../LTRM data/water_data_qfneg.csv", row.names = FALSE)
water20 %>% select(CHLcal)
water20 %>% filter(CHLcal < 0) %>%
ggplot(aes(x = CHLcal)) +
geom_histogram(bins = 10)
histogram(water20$SS)
hist(water20$SS)
summary(water20$SS)
hist(water20$SS[water20$SS < 0])
summary(water20$SS)
summary(water20$SS[water20$SS < 0])
summary(water20$SS[water20$SS > 0])
summary(water20$TEMP[water20$TEMP < 0])
hist(water20$TEMP[water20$TEMP < 0])
summary(water20$TEMP[water20$TEMP > 0])
summary(water20$P[water20$TP < 0])
summary(water20$TP[water20$TP < 0])
summary(water20$WDP[water20$WDP < 0])
hist(water20$WDP)
summary(water20$WDP[water20$WDP < 0])
hist(water20$WDP)
summary(water20$WDP[water20$WDP < 0])
length(water20$WDP[water20$WDP < 0])
length(qfwater20$WDP[qfwater20$WDP < 0])
hist(qfwater20$WDP)
summary(qfwater20$WDP[qfwater20$WDP < 0])
length(qfwater20$WDP[qfwater20$WDP < 0])
qfwater20 %>% filter(WDP < 0) %>% select(SHEETBAR, WDP)
qfwater20$WDP[qfwater20$WDP < 0]
qfwater20 %>% filter(WDP < 0) %>% select(SHEETBAR, WDP)
water20 <- read.csv(file = "../LTRM data/ltrm_water_data_lat_long.csv")
water20 %>% filter(WDP < 0) %>% select(SHEETBAR, WDP, ZMAX)
water20 %>% filter(ZMAX < 0) %>% select(SHEETBAR, WDP, ZMAX)
water20 %>% filter(ZMAX == 0) %>% select(SHEETBAR, WDP, ZMAX)
water20 %>% filter(ZMAX == 0) %>% select(SHEETBAR, WDP, ZMAX) %>% group_by(WDP,ZMAX) %>% summarize(count = n())
water20 %>% filter(WDP < 0) %>% select(SHEETBAR, WDP, ZMAX)
water20$CHLF
water20$CHLFQF
summary(water20$CHLFQF)
summary(water20$CHLSQF)
typeof(water20$CHLFQF)
typeof(water20$CHLSQF)
table(water20$CHLFQF)
table(water20$CHLSQF)
data.frame(table(water20$CHLFQF))
data.frame(table(water20$CHLSQF))
>>>>>>> Stashed changes
