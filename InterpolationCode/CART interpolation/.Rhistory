pl13 <- water20 %>%
filter(FLDNUM == "3") %>%
filter(CALCZCD == "SF") %>%
filter_at(vars(c("TURBQF","TEMPQF","DOQF","VELQF",
"ZMAXQF","SECCHIQF","CONDQF")),
any_vars(. != "A" & . != "0")) %>%
# forrest, edit this
filter_at(vars(c("TNQF","TPQF","SSQF")),
any_vars(. != 8 & . != 64))
pl13 <- water20 %>%
filter(FLDNUM == "3") %>%
filter(CALCZCD == "SF") %>%
filter_at(vars(c("TURBQF","TEMPQF","DOQF","VELQF",
"ZMAXQF","SECCHIQF","CONDQF")),
any_vars(. != "A" | . != "0")) %>%
# forrest, edit this
filter_at(vars(c("TNQF","TPQF","SSQF")),
any_vars(. != 8 | . != 64))
pl13 <- water20 %>%
filter(FLDNUM == "3") %>%
filter(CALCZCD == "SF") %>%
filter_at(vars(c("TURBQF","TEMPQF","DOQF","VELQF",
"ZMAXQF","SECCHIQF","CONDQF")),
any_vars(. != "A" | . != "0")) %>%
# forrest, edit this
filter_at(vars(c("TNQF","TPQF","SSQF")),
any_vars(. != 8 | . != 64))
pl13_badqf$TURBQF
pl13 <- water20 %>%
filter(FLDNUM == "3") %>%
filter(CALCZCD == "SF") %>%
filter(TURBQF !%in% c("A", "0")),"TEMPQF","DOQF","VELQF",
pl13 <- water20 %>%
filter(FLDNUM == "3") %>%
filter(CALCZCD == "SF") %>%
filter(vars("TURBQF", "TEMPQF","DOQF","VELQF",
"ZMAXQF","SECCHIQF","CONDQF")),
pl13 <- water20 %>%
filter(FLDNUM == "3") %>%
filter(CALCZCD == "SF") %>%
filter(vars("TURBQF", "TEMPQF","DOQF","VELQF",
"ZMAXQF","SECCHIQF","CONDQF"),
all_vars(. = "A" | . = "0")) %>%
pl13 <- water20 %>%
filter(FLDNUM == "3") %>%
filter(CALCZCD == "SF") %>%
filter(vars("TURBQF", "TEMPQF","DOQF","VELQF",
"ZMAXQF","SECCHIQF","CONDQF"),
all_vars(. == "A" | . == "0")) %>%
# forrest, edit this
filter_at(vars(c("TNQF","TPQF","SSQF")),
all_vars(. != 8 | . != 64))
water20 %>%
filter(FLDNUM == "3") %>%
filter(CALCZCD == "SF") %>%
filter(vars("TURBQF", "TEMPQF","DOQF","VELQF",
"ZMAXQF","SECCHIQF","CONDQF"),
all_vars(. == "A" | . == "0")
water20 %>%
pl13 <- water20 %>%
filter(FLDNUM == "3") %>%
filter(CALCZCD == "SF") %>%
filter(vars(c("TURBQF", "TEMPQF","DOQF","VELQF",
"ZMAXQF","SECCHIQF","CONDQF")),
all_vars(. = "A" | . = "0")) %>%
pl13 <-
water20 %>%
filter(FLDNUM == "3") %>%
filter(CALCZCD == "SF") %>%
filter(vars(c("TURBQF", "TEMPQF","DOQF","VELQF",
"ZMAXQF","SECCHIQF","CONDQF")),
any_vars(. == "A" | . == "0")) %>%
# forrest, edit this
filter_at(vars(c("TNQF","TPQF","SSQF")),
all_vars(. != 8 | . != 64))
pl13 <-
water20 %>%
filter(FLDNUM == "3") %>%
filter(CALCZCD == "SF") %>%
filter_at(vars(c("TURBQF", "TEMPQF","DOQF","VELQF",
"ZMAXQF","SECCHIQF","CONDQF")),
all_vars(. == "A" | . == "0")) %>%
# forrest, edit this
filter_at(vars(c("TNQF","TPQF","SSQF")),
all_vars(. == 8 | . == 64))
# pl13 <-
#
water20 %>%
filter(FLDNUM == "3") %>%
filter(CALCZCD == "SF") %>%
filter_at(vars(c("TURBQF", "TEMPQF","DOQF","VELQF",
"ZMAXQF","SECCHIQF","CONDQF")),
all_vars(. == "A" | . == "0")) %>%
# forrest, edit this
filter_at(vars(c("TNQF","TPQF","SSQF")),
all_vars(. == 8 | . == 64))
# pl13 <-
#
water20 %>%
filter(FLDNUM == "3") %>%
filter(CALCZCD == "SF") %>%
filter_at(vars(c("TURBQF", "TEMPQF","DOQF","VELQF",
"ZMAXQF","SECCHIQF","CONDQF")),
any_vars(. == "A" | . == "0")) %>%
# forrest, edit this
filter_at(vars(c("TNQF","TPQF","SSQF")),
any_vars(. == 8 | . == 64))
# pl13 <-
#
water20 %>%
filter(FLDNUM == "3") %>%
filter(CALCZCD == "SF") %>%
filter_at(vars(c("TURBQF", "TEMPQF","DOQF","VELQF",
"ZMAXQF","SECCHIQF","CONDQF")),
all_vars(. == "A" | . == "0")) %>%
# forrest, edit this
filter_at(vars(c("TNQF","TPQF","SSQF")),
all_vars(. == 8 | . == 64))
water20 %>%
filter(FLDNUM == "3") %>%
filter(CALCZCD == "SF") %>%
filter_at(vars(c("TURBQF", "TEMPQF","DOQF","VELQF",
"ZMAXQF","SECCHIQF","CONDQF")),
all_vars(. == "A" | . == "0"))
pl13 %>% dim()
# pl13 <-
#
water20 %>%
filter(FLDNUM == "3") %>%
filter(CALCZCD == "SF") %>%
filter_at(vars(c(TURBQF, TEMPQF, DOQF, VELQF, ZMAXQF,
SECCHIQF, CONDQF)),
all_vars(. == "A" | . == "0"))
# pl13 <-
#
water20 %>%
filter(FLDNUM == "3") %>%
filter(CALCZCD == "SF") %>%
filter_at(vars(c(TURBQF, TEMPQF, DOQF, VELQF, ZMAXQF,
SECCHIQF, CONDQF)),
any_vars(. == "A" | . == "0"))
# pl13 <-
#
water20 %>%
filter(FLDNUM == "3") %>%
filter(CALCZCD == "SF") %>%
filter_at(vars(c(TURBQF, TEMPQF, DOQF, VELQF, ZMAXQF,
SECCHIQF, CONDQF)),
any_vars(. == "A" | . == "0")) %>%
filter_at(vars(c(TNQF,TPQF,SSQF)),
all_vars(. == 8 | . == 64))
# pl13 <-
#
water20 %>%
filter(FLDNUM == "3") %>%
filter(CALCZCD == "SF") %>%
filter_at(vars(c(TURBQF, TEMPQF, DOQF, VELQF, ZMAXQF,
SECCHIQF, CONDQF)),
any_vars(. == "A" | . == "0")) %>%
filter_at(vars(c(TNQF,TPQF,SSQF)),
any_vars(. == 8 | . == 64))
water20 %>%
filter(FLDNUM == "3") %>%
filter(CALCZCD == "SF") %>%
filter_at(vars(c(TURBQF, TEMPQF, DOQF, VELQF, ZMAXQF,
SECCHIQF, CONDQF)),
any_vars(. == "A" | . == "0"))
badqf <- water20 %>%
filter(FLDNUM == "3") %>%
filter(CALCZCD == "SF") %>%
filter_at(vars(c(TURBQF, TEMPQF, DOQF, VELQF, ZMAXQF,
SECCHIQF, CONDQF)),
any_vars(. == "A" | . == "0"))
badqf %>%
filter_at(vars(c(TNQF,TPQF,SSQF)),
any_vars(. == 8 | . == 64))
badqf7 <- water20 %>%
filter(FLDNUM == "3") %>%
filter(CALCZCD == "SF") %>%
filter_at(vars(c(TURBQF, TEMPQF, DOQF, VELQF, ZMAXQF,
SECCHIQF, CONDQF)),
any_vars(. == "A" | . == "0"))
badqf3 <- water20 %>%
filter(FLDNUM == "3") %>%
filter(CALCZCD == "SF") %>%
filter_at(vars(c(TNQF,TPQF,SSQF)),
any_vars(. == 8 | . == 64))
badqf7 <- water20 %>%
filter(FLDNUM == "3") %>%
filter(CALCZCD == "SF") %>%
filter_at(vars(c(TURBQF, TEMPQF, DOQF, VELQF, ZMAXQF,
SECCHIQF, CONDQF)),
any_vars(. == "A" | . == "0"))
badqf3 <- water20 %>%
filter(FLDNUM == "3") %>%
filter(CALCZCD == "SF") %>%
filter_at(vars(c(TNQF,TPQF,SSQF)),
any_vars(. == 8 | . == 64))
badqf <- full_join(badqf7, badqf3, by = SHEETBAR)
badqf <- full_join(badqf7, badqf3, by = "SHEETBAR")
water20 %>%
filter(FLDNUM == "3") %>%
filter(CALCZCD == "SF") %>% dim()
27915-242
badqf7 <- water20 %>%
filter_at(vars(c(TURBQF, TEMPQF, DOQF, VELQF, ZMAXQF,
SECCHIQF, CONDQF)),
any_vars(. == "A" | . == "0"))
badqf3 <- water20 %>%
filter_at(vars(c(TNQF,TPQF,SSQF)),
any_vars(. == 8 | . == 64))
badqf <- full_join(badqf7, badqf3, by = "SHEETBAR")
water20 <- water20 %>% filter(CALCZCD == "SF")
badqf7 <- water20 %>%
filter_at(vars(c(TURBQF, TEMPQF, DOQF, VELQF, ZMAXQF,
SECCHIQF, CONDQF)),
any_vars(. == "A" | . == "0"))
badqf3 <- water20 %>%
filter_at(vars(c(TNQF,TPQF,SSQF)),
any_vars(. == 8 | . == 64))
badqf <- full_join(badqf7, badqf3, by = "SHEETBAR")
147171-3269
knitr::opts_chunk$set(echo = TRUE, message = FALSE)
water20 <- read.csv("../../LTRM data/water_data_qfneg.csv", header = TRUE)
library(tidyverse)
library(stringr)
library(lubridate)
library(rpart) # for regression tree
# library(rpart.plot)
library(caret) # for other models
library(rattle)
library(kableExtra)
library(broom)
View(water20)
var_missing_rate <- sapply(water20, function(x) sum(is.na(x))/length(x))
var_missing_rate <- data.frame(var = names(var_missing_rate),
missing_rate = unname(var_missing_rate))
var_missing_rate %>%
mutate(`missing rate` = round(missing_rate, digits = 3)) %>%
select(-missing_rate) %>%
arrange(-`missing rate`) %>%
kbl(booktabs = T)
var_missing_rate %>% filter(missing_rate > 0) %>%
ggplot(aes(x = var, y = missing_rate)) +
geom_bar(stat = "identity") +
coord_flip()
typeof(water20$FLDNUM)
set.seed(4747)
# train and test data created from rows with existing TP values
fullTP <- water20 %>% filter(!is.na(TP))
# this gives me a total of ten 80/20 splits
train_idx <- createDataPartition(fullTP$TP, p = .8,
list = FALSE, times = 10)
TPtrain1 <- fullTP[train_idx[,1],]
TPtest1 <- fullTP[-train_idx[,1],]
train_idx <- createDataPartition(fullTP$TP, p = .8,list = FALSE)
set.seed(4747)
# train and test data created from rows with existing TP values
fullTP <- water20 %>% filter(!is.na(TP))
# this gives me a total of ten 80/20 splits
train_idx <- createDataPartition(fullTP$TP, p = .8,list = FALSE)
TPtrain1 <- fullTP[train_idx]
TPtest1 <- fullTP[-train_idx]
TPtrain1 <- fullTP[train_idx,]
TPtest1 <- fullTP[-train_idx,]
tr.TP <- rpart(TP ~ .,
data = watertrain1,
control = rpart.control(xval = 15,
minsplit = 100))
tr.TP <- rpart(TP ~ .,
data = TPtrain1,
control = rpart.control(xval = 15,
minsplit = 100))
printcp(tr.TP)
png("tree_TP.png")
fancyRpartPlot(tr.TP)
dev.off()
png("tree_TP_CV.png")
plotcp(tr.TP)
dev.off()
tr.TP <- rpart(TP ~ .,
data = TPtrain1,
control = rpart.control(xval = 10,
minsplit = 100))
printcp(tr.TP)
png("tree_TP.png")
fancyRpartPlot(tr.TP)
dev.off()
png("tree_TP_CV.png")
plotcp(tr.TP)
dev.off()
library(rpart.plot)
tr.TP <- rpart(TP ~ .,
data = TPtrain1,
control = rpart.control(xval = 10,
minsplit = 100))
printcp(tr.TP)
png("tree_TP.png")
fancyRpartPlot(tr.TP)
dev.off()
png("tree_TP_CV.png")
plotcp(tr.TP)
dev.off()
summary(tr.TP)
fancyRpartPlot(tr.TP)
water20 <- water20 %>%
mutate(nice_date = mdy(DATE),
year = year(nice_date),
quarter = quarter(nice_date, fiscal_start = 3),
FLDNUM = case_when(FLDNUM == 1 ~ "Lake City, MN",
FLDNUM == 2 ~ "Onalaska, WI",
FLDNUM == 3 ~ "Bellevue, IA",
FLDNUM == 4 ~ "Brighton, IL",
FLDNUM == 5 ~ "Jackson, MO",
FLDNUM == 6 ~ "Havana, IL"),
FLDNUM = as.factor(FLDNUM),
STRATUM = as.factor(STRATUM)) %>% # CART can split on categorical variable if
# encoded as a factor variable
select(-SHEETBAR, -nice_date, -DATE, -LOCATCD)
set.seed(4747)
# train and test data created from rows with existing TP values
fullTP <- water20 %>% filter(!is.na(TP))
# this gives me a total of ten 80/20 splits
train_idx <- createDataPartition(fullTP$TP, p = .8,list = FALSE)
TPtrain1 <- fullTP[train_idx,]
TPtest1 <- fullTP[-train_idx,]
tr.TP <- rpart(TP ~ .,
data = TPtrain1,
control = rpart.control(xval = 10,
minsplit = 100))
printcp(tr.TP)
png("tree_TP.png")
fancyRpartPlot(tr.TP)
dev.off()
png("tree_TP_CV.png")
plotcp(tr.TP)
dev.off()
fancyRpartPlot(tr.TP)
summary(tr.TP)
# tidy(tr.TP) TODO
fancyRpartPlot(tr.TP)
plotcp(tr.TP)
str(plotcp(tr.TP))
tr.TP$cptable[which.min(tree$cptable[,"xerror"]),"CP"]
tr.TP$cptable[which.min(tr.TP$cptable[,"xerror"]),"CP"]
tr.TP$cptable[,"xerror"]
printcp(tr.TP)
printcp(tr.TP)
0.57869 + 0.067620
tr.TP.prune <- prune(tr.TP, cp = 0.2)
data.frame(round(tr.TP.prune$cptable, digits = 3)) %>%
kbl(booktabs = T)
summary(tr.TP.prune)
plotcp(tr.TP.prune)
summary(tr.TP.prune)
fancyRpartPlot(tr.TP.prune)
plotcp(tr.TP.prune)
# https://rstudio-pubs-static.s3.amazonaws.com/27179_e64f0de316fc4f169d6ca300f18ee2aa.html
# this author uses the lowest CV error to choose the cp. we don't use this message
# use 1-SE rule
tr.TP.prune <- prune(tr.TP, cp = 0.02)
summary(tr.TP.prune)
fancyRpartPlot(tr.TP.prune)
plotcp(tr.TP.prune)
summary(tr.TP.prune)
fancyRpartPlot(tr.TP.prune)
TPtrain1$TP.PREDICT <- predict(tr.TP, data = TPtrain1)
TPtrain1 <- TPtrain1 %>%
mutate(TP.SQ.ERROR = (TP - TP.PREDICT)^2)
print("RSME is")
sqrt(sum(TPtrain1$TP.SQ.ERROR)/dim(TPtrain1)[1])
TPtrain1 %>%
ggplot(aes(x = TP, y = TP.PREDICT)) +
geom_point(alpha = 0.2) +
coord_equal() +
theme(aspect.ratio = 1) + xlim(0, 2) + ylim(0, 2)
ggsave("tree_training_predictvsactual.png")
TPtrain1$TP.PREDICT <- predict(tr.TP, data = TPtrain1)
TPtrain1 <- TPtrain1 %>%
mutate(TP.SQ.ERROR = (TP - TP.PREDICT)^2)
print("RSME is")
sqrt(sum(TPtrain1$TP.SQ.ERROR)/dim(TPtrain1)[1])
TPtrain1 %>%
ggplot(aes(x = TP, y = TP.PREDICT)) +
geom_point(alpha = 0.2) +
coord_equal()
ggsave("tree_training_predictvsactual.png")
TPtrain1 %>%
ggplot(aes(x = TP.SQ.ERROR)) +
geom_histogram()
TPtrain1 %>%
ggplot(aes(x = TP.SQ.ERROR)) +
geom_histogram(bins = 10)
TPtrain1 %>%
ggplot(aes(x = TP.SQ.ERROR)) +
geom_histogram(bins = 100)
TPtrain1 %>%
ggplot(aes(x = TP.SQ.ERROR)) +
geom_boxplot()
TPtrain1 %>%
ggplot(aes(x = TP.SQ.ERROR)) +
geom_histogram(binwidth = 1)
TPtrain1 %>%
ggplot(aes(x = TP.SQ.ERROR)) +
geom_histogram(binwidth = 0.5)
TPtrain1 %>%
ggplot(aes(x = TP.SQ.ERROR)) +
geom_histogram(binwidth = 0.15)
TPtrain1 %>%
ggplot(aes(x = TP.SQ.ERROR)) +
geom_histogram(bins = 100)
TPtest1$TP.PREDICT <- predict(tr.TP.prune, TPtest1)
TPtest1 <- TPtest1 %>%
mutate(TP.SQ.ERROR = (TP - TP.PREDICT)^2)
print("RSME is")
sqrt(sum(TPtest1$TP.SQ.ERROR)/dim(TPtest1)[1])
TPtest1 %>%
ggplot(aes(x = TP, y = TP.PREDICT)) +
geom_point(alpha = 0.2) +
coord_equal() +
theme(aspect.ratio = 1) + xlim(0, 2) + ylim(0, 2)
ggsave("tree_test_predictvsactual.png")
tr.TN <- rpart(TN ~ .,
data = TPtrain1,
control = rpart.control(xval = 10,
minsplit = 100))
printcp(tr.TN)
png("tree_TN.png")
fancyRpartPlot(tr.TN)
dev.off()
png("tree_TN_CV.png")
plotcp(tr.TN)
dev.off()
fancyRpartPlot(tr.TN)
plotcp(tr.TN)
fullTN <- water20 %>%
filter(!is.na(TN))
train_idx <- createDataPartition(fullTN$TN, p = .8,list = FALSE)
TNtrain1 <- fullTN[train_idx,]
TNtest1 <- fullTN[-train_idx,]
tr.TN <- rpart(TN ~ .,
data = TPtrain1,
control = rpart.control(xval = 10,
minsplit = 100))
printcp(tr.TN)
png("tree_TN.png")
fancyRpartPlot(tr.TN)
dev.off()
png("tree_TN_CV.png")
plotcp(tr.TN)
dev.off()
fancyRpartPlot(tr.TN)
plotcp(tr.TN)
0.83304 + 0.38473
TNtest1$TN.PREDICT <- predict(tr.TN, data = TNtest1)
predict(tr.TN, data = TNtest1)
tr.TN <- rpart(TN ~ .,
data = TNtrain1,
control = rpart.control(xval = 10,
minsplit = 100,
cp = 0.0001))
printcp(tr.TN)
png("tree_TN.png")
fancyRpartPlot(tr.TN)
tr.TN <- rpart(TN ~ .,
data = TNtrain1,
control = rpart.control(xval = 10,
minsplit = 100,
cp = 0.001))
printcp(tr.TN)
png("tree_TN.png")
fancyRpartPlot(tr.TN)
dev.off()
png("tree_TN_CV.png")
plotcp(tr.TN)
dev.off()
fancyRpartPlot(tr.TN)
plotcp(tr.TN)
tr.TN.prune <- prune(tr.TN, cp = 0.01)
TNtest1$TN.PREDICT <- predict(tr.TN, data = TNtest1)
tr.TN.prune <- prune(tr.TN, cp = 0.01)
TNtest1$TN.PREDICT <- predict(tr.TN,prune, data = TNtest1)
TNtest1
TNtest1$TN.PREDICT
predict(tr.TN,prune, data = TNtest1)
predict(tr.TN.prune, data = TNtest1)
TNtest1$TN.PREDICT <- predict(tr.TN.prune, data = TNtest1)
length(predict(tr.TN.prune, data = TNtest1))
length(predict(tr.TN.prune, data = TNtrain1))
TNtrain1$TN.PREDICT <- predict(tr.TN.prune, data = TNtrain1)
TNtrain1 <- TNtrain1 %>%
mutate(TP.SQ.ERROR = (TP - TP.PREDICT)^2)
TNtrain1 <- TNtrain1 %>%
mutate(TN.SQ.ERROR = (TN - TN.PREDICT)^2)
print("RSME is")
sqrt(sum(TNtrain1$TN.SQ.ERROR)/dim(TNtrain1)[1])
TNtest1 %>%
ggplot(aes(x = TN, y = TN.PREDICT)) +
geom_point(alpha = 0.2) +
coord_equal() +
theme(aspect.ratio = 1) + xlim(0, 2) + ylim(0, 2)
TNtrain1 %>%
ggplot(aes(x = TN, y = TN.PREDICT)) +
geom_point(alpha = 0.2) +
coord_equal()
TNtrain1 %>%
ggplot(aes(x = TN, y = TN.PREDICT)) +
geom_point(alpha = 0.2)
ggsave("TN_tree_test_predictvsactual.png")
TNtest1$TN.PREDICT <- predict(tr.TN.prune, data = TNtest1)
TPtest1$TP.PREDICT <- predict(tr.TP.prune, TPtest1)
TNtest1$TN.PREDICT <- predict(tr.TN.prune, data = TNtest1)
