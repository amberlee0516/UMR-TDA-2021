count_n_duplicates <- function(n, df) {
return((df %>% filter(count == n) %>% dim())[1]/156474) #156k distinct sheetbars
}
count_duplicates <- data.frame(proportion = sapply(1:8, count_n_duplicates,
duplicates),
number_duplicates = 1:8)
ggplot(count_duplicates, aes(x = number_duplicates, y = proportion)) +
geom_bar(stat = "identity")
count_duplicates %>% kbl(booktabs = T)
water20 %>%
filter(SHEETBAR == -4604347) %>%
select(SHEETBAR, Z, CALCZCD, DO, TP, TN) %>%
kbl(booktabs = T) %>%
kable_styling(latex_options = "striped")
water20 %>%
filter(SHEETBAR == 41015929	) %>%
select(SHEETBAR, Z, CALCZCD, DO, TP, TN) %>%
kbl(booktabs = T) %>%
kable_styling(latex_options = "striped")
table(water20$CALCZCD)
sapply(water20 %>%
filter(CALCZCD == "SF") %>%
select(all_of(water_var)),
function(x) sum(is.na(x)/length(x)))
(water20 %>%
filter(CALCZCD == "") %>%
dim())[1]
sapply((water20 %>%
filter(CALCZCD == "") %>%
select(all_of(water_var))), function(x) sum(is.na(x)/length(x)))
table(water20$SITETYPE)
water20 <- water20 %>%
filter(CALCZCD == "SF") %>%
filter(SITETYPE != 2) %>%
select(all_of(c(identifier_var, water_var, waterQF_var)))
qf_A0 <- c("TURBQF", "TEMPQF", "DOQF", "VELQF", "ZMAXQF",
"SECCHIQF", "CONDQF")
qf_864 <- c("TNQF", "TPQF", "SSQF")
water20$tmp_idx <- 1:nrow(water20)
qfcodes_setNA <- function(qf_A0, qf_864, water_df,
identifier_var, water_var, waterQF_var){
# qf_A0 is a character vector of the variable qf names for which
# A, 0 qf codes are bad
# qf_864 is a character vector of the variable qf names for which
# 8, 64 qf codes are bad
# water_df is the entire water_df
# last 3 variables are just for naming
replace_na_qf <- function(qf_str, df, two_badqfval){
# remove QF at the end of qf_str
var_str <- substr(qf_str, 1, nchar(qf_str)-2)
if (var_str == "ZMAX") { var_str <- "WDP"}
df <- df %>%
# !!sym is for non standard evaluation
mutate(!!sym(var_str) := case_when(!!sym(qf_str) == two_badqfval[1] ~ NA_real_,
# specify the type of NA correctly
!!sym(qf_str) == two_badqfval[2] ~ NA_real_,
TRUE ~ !!sym(var_str))) %>%
# other QF code values are fine, keep data
select(all_of(c("tmp_idx", var_str, qf_str))) # keep sheetbar for joins
return(df)
}
# remove_864 <- function(qf_str, df){
#
#   # remove the QF at the end
#   var_str <- substr(qf_str, 1, nchar(qf_str)-2)
#
#   df <- df %>%
#     mutate(!!sym(var_str) := case_when(!!sym(qf_str) == 8 ~ NA_real_,
#                                        # use correct NA type and !!sym for NSE
#                                        !!sym(qf_str) == 64 ~ NA_real_,
#                                        TRUE ~ !!sym(var_str))) %>%
#                                        # remaining QF code values are fine
#     select(all_of(c("tmp_idx", var_str, qf_str))) # sheetbars for joining
#
# }
remove_A0_df <- bind_cols(lapply(qf_A0, replace_na_qf, water_df, c("A", "0"))) %>%
rename(tmp_idx = `tmp_idx...1`) %>%
select(!contains("..."))
remove_864_df <- bind_cols(lapply(qf_864, replace_na_qf, water_df, c(8, 64))) %>%
rename(tmp_idx = `tmp_idx...1`) %>%
select(!contains("..."))
fixedqf_df <- inner_join(remove_864_df, remove_A0_df, by = "tmp_idx") %>%
inner_join(water_df, by = c("tmp_idx", waterQF_var)) %>%
# this causes duplicate columns for water_var, which we do want
# because water_df has the old (wrong) values for water_var
select(!contains(".y")) %>% # remove the old (wrong) values from water_df
rename_with(~ gsub(".x", "", .), contains(".x")) %>% # rename
select(all_of(c(identifier_var, water_var, waterQF_var))) # reorder columns
return(fixedqf_df)
}
qfwater20 <- qfcodes_setNA(qf_A0, qf_864, water20,
identifier_var, water_var, waterQF_var)
qfcodes_check <- function(qf_str, df, two_badqfval){
var_str <- substr(qf_str, 1, nchar(qf_str)-2)
if (var_str == "ZMAX") {var_str = "WDP"}
badqf_length <- df %>%
filter(!!sym(qf_str) == two_badqfval[1] | !!sym(qf_str) == two_badqfval[2]) %>%
pull(!!sym(var_str)) %>%
length()
badqf_sum <- df %>%
filter(!!sym(qf_str) == two_badqfval[1] | !!sym(qf_str) == two_badqfval[2]) %>%
pull(!!sym(var_str)) %>%
is.na(.) %>%
sum()
if (badqf_length != badqf_sum) {return(qf_str)}
return(badqf_length == badqf_sum)
}
c(unlist(lapply(qf_A0, qfcodes_check, qfwater20, c("A", "0"))),
unlist(lapply(qf_864, qfcodes_check, qfwater20, c(8, 64))))
# Collapse the rows with the same SHEETBAR code
row_collapse <- function(data, water_var, identifier_var) {
# Count how many rows each sheetbar has
sheetbar_counts <- data %>%
group_by(SHEETBAR) %>%
dplyr::summarize(count = n()) %>%
arrange(-count) # 147130
# Filter for the sheetbars that have multiple rows
sheetbar_dups <- sheetbar_counts %>% filter(count > 1) # 33
data_dups <- data[data$SHEETBAR %in% sheetbar_dups$SHEETBAR, ] # 74
# Set aside the rows with sheetbars that only occur once
water_cleaned <- data[!(data$SHEETBAR %in% sheetbar_dups$SHEETBAR), ] %>%
select(all_of(c(identifier_var, water_var)))
# Average the continuous vars and re-merge the identifiers to the collapsed rows
data_dups_ids <- data_dups[identifier_var]
# Find the mean of the continuous variables
data_dups <- aggregate(data_dups[water_var],
by = list(data_dups$SHEETBAR),
FUN = mean,
na.rm = TRUE,
na.action = na.pass) %>%
rename('SHEETBAR' = 'Group.1')
# Rounds the data frame
is.num <-sapply(data_dups, is.numeric)
data_dups[is.num] <- lapply(data_dups[is.num], round, 2)
# Replace NaN with Na to be consistent with the rest of the data
data_dups[is.na(data_dups)] <- NA
# Merge the ids back to the water_vars
data_dups <- unique(merge(data_dups, data_dups_ids, by = 'SHEETBAR'))
# Add the collapsed rows to the cleaned data
water_cleaned <- rbind(water_cleaned, data_dups)
return(water_cleaned)
}
# Just continuous vars and identifiers (remove QF columns)
qfwater20 <- row_collapse(qfwater20[c(water_var, identifier_var)],
water_var, identifier_var)
View(qfwater20)
qfwater20$SHEETBAR == 45000889
qfwater20[qfwater20$SHEETBAR == 4500889]
qfwater20[qfwater20$SHEETBAR == 45000889]
qfwater20[qfwater20$SHEETBAR == 45000889,]
check_dups <- qfwater20 %>% group_by(SHEETBAR) %>% dplyr::summarize(count = n()) %>% arrange(-count)
View(check_dups)
# Set na TP values to detection limit - .001
tmp2 <- mutate( qfwater20, TP = ifelse(TP < 0, .002, TP))
tmp2 <- mutate( tmp2, TN = ifelse(TN < 0, .041, TN))
tmp2 <- mutate( tmp2, SS = ifelse(SS < 0, .02, SS))
tmp2 <- mutate( tmp2, WDP = ifelse(WDP < 0, 0, WDP))
tmp2 <- mutate( tmp2, CHLcal = ifelse(CHLcal < 0, 0.0183, CHLcal))
tmp2 <- mutate( tmp2, TEMP = ifelse(TEMP < 0, 0.05, CHLcal))
View(tmp2)
sum(tmp2$TEMP < 0, na.rm = TRUE)
sum(tmp2$TN < 0, na.rm = TRUE)
sum(tmp2$TP < 0, na.rm = TRUE)
sum(tmp2$WDP  < 0, na.rm = TRUE)
write.csv(tmp2, "../LTRM data/water_data_qfneg.csv", row.names = FALSE)
qfwater20[qfwater20$TP < 0]
qfwater20[qfwater20$TP < 0,]
get_negatives <- qfwater20[qfwater20$TP < 0,]
View(get_negatives)
get_negatives <- qfwater20 %>% filter(TP < 0)
View(get_negatives)
check_negatives <- tmp2 %>% filter(TP == .002)
View(count_duplicates)
View(check_negatives)
get_negatives <- qfwater20 %>% filter(TN < 0)
check_negatives <- tmp2 %>% filter(TN == .041)
View(check_negatives)
nrow(get_negatives)
nrow(check_negatives)
write.csv(tmp2, "../LTRM data/water_data_qfneg.csv", row.names = FALSE)
field4 <- tmp2 %>% filter(FLDNUM == 4)
sum(is.na(water20$TP)
)
sum(is.na(qfwater20$TP))
View(tmp2)
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
library(tidyverse)
library(ggplot2)
library(lubridate)
library(corrplot)
library(RColorBrewer)
library(kableExtra)
# set working directory to source file location
# setwd("~/Documents/GitHub/UMR-TDA-2021")
water20 <- read.csv(file = "../LTRM data/ltrm_water_data_lat_long.csv")
water_var <- c('TN','TP','TEMP','DO','TURB',
'COND','VEL','SS','WDP','CHLcal','SECCHI')
waterQF_var <- paste(water_var, "QF", sep = "")
identifier_var <- c('SHEETBAR', 'DATE', 'LATITUDE', 'LONGITUDE', 'FLDNUM', 'STRATUM', 'LOCATCD')
waterQF_var <- waterQF_var[waterQF_var != "WDPQF" &
waterQF_var != "CHLcalQF"]
waterQF_var <- c(waterQF_var, "ZMAXQF")
water20 <- water20 %>%
filter(CALCZCD == "SF")
water20 <- water20 %>%
filter(CALCZCD == "SF") %>%
filter(SITETYPE != 2) %>%
select(all_of(c(identifier_var, water_var, waterQF_var)))
qf_A0 <- c("TURBQF", "TEMPQF", "DOQF", "VELQF", "ZMAXQF",
"SECCHIQF", "CONDQF")
qf_864 <- c("TNQF", "TPQF", "SSQF")
water20$tmp_idx <- 1:nrow(water20)
qfcodes_setNA <- function(qf_A0, qf_864, water_df,
identifier_var, water_var, waterQF_var){
# qf_A0 is a character vector of the variable qf names for which
# A, 0 qf codes are bad
# qf_864 is a character vector of the variable qf names for which
# 8, 64 qf codes are bad
# water_df is the entire water_df
# last 3 variables are just for naming
replace_na_qf <- function(qf_str, df, two_badqfval){
# remove QF at the end of qf_str
var_str <- substr(qf_str, 1, nchar(qf_str)-2)
if (var_str == "ZMAX") { var_str <- "WDP"}
df <- df %>%
# !!sym is for non standard evaluation
mutate(!!sym(var_str) := case_when(!!sym(qf_str) == two_badqfval[1] ~ NA_real_,
# specify the type of NA correctly
!!sym(qf_str) == two_badqfval[2] ~ NA_real_,
TRUE ~ !!sym(var_str))) %>%
# other QF code values are fine, keep data
select(all_of(c("tmp_idx", var_str, qf_str))) # keep sheetbar for joins
return(df)
}
# remove_864 <- function(qf_str, df){
#
#   # remove the QF at the end
#   var_str <- substr(qf_str, 1, nchar(qf_str)-2)
#
#   df <- df %>%
#     mutate(!!sym(var_str) := case_when(!!sym(qf_str) == 8 ~ NA_real_,
#                                        # use correct NA type and !!sym for NSE
#                                        !!sym(qf_str) == 64 ~ NA_real_,
#                                        TRUE ~ !!sym(var_str))) %>%
#                                        # remaining QF code values are fine
#     select(all_of(c("tmp_idx", var_str, qf_str))) # sheetbars for joining
#
# }
remove_A0_df <- bind_cols(lapply(qf_A0, replace_na_qf, water_df, c("A", "0"))) %>%
rename(tmp_idx = `tmp_idx...1`) %>%
select(!contains("..."))
remove_864_df <- bind_cols(lapply(qf_864, replace_na_qf, water_df, c(8, 64))) %>%
rename(tmp_idx = `tmp_idx...1`) %>%
select(!contains("..."))
fixedqf_df <- inner_join(remove_864_df, remove_A0_df, by = "tmp_idx") %>%
inner_join(water_df, by = c("tmp_idx", waterQF_var)) %>%
# this causes duplicate columns for water_var, which we do want
# because water_df has the old (wrong) values for water_var
select(!contains(".y")) %>% # remove the old (wrong) values from water_df
rename_with(~ gsub(".x", "", .), contains(".x")) %>% # rename
select(all_of(c(identifier_var, water_var, waterQF_var))) # reorder columns
return(fixedqf_df)
}
qfwater20 <- qfcodes_setNA(qf_A0, qf_864, water20,
identifier_var, water_var, waterQF_var)
sum
sum(is.na(water20))
sum(is.na(qfwater20))
sum(is.na(qfwater$TP))
sum(is.na(qfwater20$TP))
sum(is.na(qfwater20$TN))
sum(is.na(qfwater20$TEMP))
sum(is.na(water20))
sum(is.na(water20[water_var]))
sum(is.na(qfwater20[water_var]))
sum(is.na(qfwater20$TP))
sum(is.na(qfwater20$TN))
sum(is.na(qfwater20$TEMP))
sum(is.na(qfwater20$TURB))
sum(is.na(qfwater20$SS))
sum(is.na(qfwater20$CHLcal))
sum(is.na(qfwater20$WDP))
sum(is.na(qfwater20$SECCHI))
sum(is.na(qfwater20$VEL))
sum(is.na(qfwater20$DO))
sum(is.na(qfwater20$COND))
get_negatives <- qfwater20 %>% filter(TN < 0)
nrow(get_negatives)
get_negatives <- qfwater20 %>% filter(TP < 0)
nrow(get_negatives)
get_negatives <- qfwater20 %>% filter(TURB < 0)
nrow(get_negatives)
get_negatives <- qfwater20 %>% filter(SS < 0)
nrow(get_negatives)
get_negatives <- qfwater20 %>% filter(DO < 0)
nrow(get_negatives)
get_negatives <- qfwater20 %>% filter(VEL < 0)
nrow(get_negatives)
get_negatives <- qfwater20 %>% filter(WDP < 0)
nrow(get_negatives)
get_negatives <- qfwater20 %>% filter(COND< 0)
nrow(get_negatives)
get_negatives <- qfwater20 %>% filter(CHLcal< 0)
nrow(get_negatives)
get_negatives <- qfwater20 %>% filter(TEMP< 0)
nrow(get_negatives)
get_negatives <- qfwater20 %>% filter(SECCHI< 0)
nrow(get_negatives)
TEMP
get_negatives <- qfwater20 %>% filter(TEMP <  0)
min(get_negatives$TEMP, na.rm - TRUE)
min(get_negatives$TEMP, na.rm = TRUE)
get_negatives <- qfwater20 %>% filter(TEMP >  0)
min(get_negatives$TEMP, na.rm = TRUE)
get_negatives <- qfwater20 %>% filter(TN >  0)
min(get_negatives$TN, na.rm = TRUE)
check_negatives <- tmp2 %>% filter(TN == .024)
nrow(check_negatives)
# Set na TP values to detection limit - .001
tmp2 <- mutate( qfwater20, TP = ifelse(TP < 0, .002, TP))
tmp2 <- mutate( tmp2, TN = ifelse(TN < 0, .024, TN))
tmp2 <- mutate( tmp2, SS = ifelse(SS < 0, .02, SS))
tmp2 <- mutate( tmp2, WDP = ifelse(WDP < 0, 0, WDP))
tmp2 <- mutate( tmp2, CHLcal = ifelse(CHLcal < 0, 0.0183, CHLcal))
tmp2 <- mutate( tmp2, TEMP = ifelse(TEMP < 0, 0.1, TEMP))
sum(tmp2$WDP < 0, na.rm = TRUE)
check_negatives <- tmp2 %>% filter(TN == .024)
nrow(check_negatives)
get_negatives <- qfwater20 %>% filter(TN >  0)
nrow(get_negatives)
get_negatives <- qfwater20 %>% filter(TN <  0)
nrow(get_negatives)
check_negatives <- tmp2 %>% filter(SS == .02)
nrow(check_negatives)
get_negatives <- qfwater20 %>% filter(SS <  0)
nrow(get_negatives)
check_negatives <- tmp2 %>% filter(TP == .002)
nrow(check_negatives)
check_negatives <- tmp2 %>% filter(TN == .024)
nrow(check_negatives)
check_negatives <- tmp2 %>% filter(WDP == 0)
nrow(check_negatives)
check_negatives <- tmp2 %>% filter(CHLcal == 0.0183)
nrow(check_negatives)
check_negatives <- tmp2 %>% filter(temp == 0.1)
nrow(check_negatives)
check_negatives <- tmp2 %>% filter(TEMP == 0.1)
nrow(check_negatives)
# Collapse the rows with the same SHEETBAR code
row_collapse <- function(data, water_var, identifier_var) {
# Count how many rows each sheetbar has
sheetbar_counts <- data %>%
group_by(SHEETBAR) %>%
dplyr::summarize(count = n()) %>%
arrange(-count) # 147130
# Filter for the sheetbars that have multiple rows
sheetbar_dups <- sheetbar_counts %>% filter(count > 1) # 33
data_dups <- data[data$SHEETBAR %in% sheetbar_dups$SHEETBAR, ] # 74
# Set aside the rows with sheetbars that only occur once
water_cleaned <- data[!(data$SHEETBAR %in% sheetbar_dups$SHEETBAR), ] %>%
select(all_of(c(identifier_var, water_var)))
# Average the continuous vars and re-merge the identifiers to the collapsed rows
data_dups_ids <- data_dups[identifier_var]
# Find the mean of the continuous variables
data_dups <- aggregate(data_dups[water_var],
by = list(data_dups$SHEETBAR),
FUN = mean,
na.rm = TRUE,
na.action = na.pass) %>%
rename('SHEETBAR' = 'Group.1')
# Rounds the data frame
is.num <-sapply(data_dups, is.numeric)
data_dups[is.num] <- lapply(data_dups[is.num], round, 2)
# Replace NaN with Na to be consistent with the rest of the data
data_dups[is.na(data_dups)] <- NA
# Merge the ids back to the water_vars
data_dups <- unique(merge(data_dups, data_dups_ids, by = 'SHEETBAR'))
# Add the collapsed rows to the cleaned data
water_cleaned <- rbind(water_cleaned, data_dups)
return(water_cleaned)
}
# Just continuous vars and identifiers (remove QF columns)
qfwater20 <- row_collapse(qfwater20[c(water_var, identifier_var)],
water_var, identifier_var)
# Collapse the rows with the same SHEETBAR code
row_collapse <- function(data, water_var, identifier_var) {
# Count how many rows each sheetbar has
sheetbar_counts <- data %>%
group_by(SHEETBAR) %>%
dplyr::summarize(count = n()) %>%
arrange(-count) # 147130
# Filter for the sheetbars that have multiple rows
sheetbar_dups <- sheetbar_counts %>% filter(count > 1) # 33
data_dups <- data[data$SHEETBAR %in% sheetbar_dups$SHEETBAR, ] # 74
# Set aside the rows with sheetbars that only occur once
water_cleaned <- data[!(data$SHEETBAR %in% sheetbar_dups$SHEETBAR), ] %>%
select(all_of(c(identifier_var, water_var)))
# Average the continuous vars and re-merge the identifiers to the collapsed rows
data_dups_ids <- data_dups[identifier_var]
# Find the mean of the continuous variables
data_dups <- aggregate(data_dups[water_var],
by = list(data_dups$SHEETBAR),
FUN = mean,
na.rm = TRUE,
na.action = na.pass) %>%
rename('SHEETBAR' = 'Group.1')
# Rounds the data frame
is.num <-sapply(data_dups, is.numeric)
data_dups[is.num] <- lapply(data_dups[is.num], round, 2)
# Replace NaN with Na to be consistent with the rest of the data
data_dups[is.na(data_dups)] <- NA
# Merge the ids back to the water_vars
data_dups <- unique(merge(data_dups, data_dups_ids, by = 'SHEETBAR'))
# Add the collapsed rows to the cleaned data
water_cleaned <- rbind(water_cleaned, data_dups)
return(water_cleaned)
}
# Just continuous vars and identifiers (remove QF columns)
tmp2 <- row_collapse(tmp2[c(water_var, identifier_var)],
water_var, identifier_var)
write.csv(tmp2, "../LTRM data/water_data_qfneg.csv", row.names = FALSE)
library(ggplot2)
library(lubridate)
library(RColorBrewer)
library(MASS)
# Set the working directory to be the github file
setwd("/Users/alainastockdill/UMR-TDA-2021/pools EDA/AS")
# Set the working directory to be the github file
setwd("/Users/alainastockdill/UMR-TDA-2021/pool_specific_EDA/Upper Pool 4")
# Set the working directory to be the github file
setwd("/Users/alainastockdill/UMR-TDA-2021/pools_specific_EDA/Upper Pool 4")
water <- read.csv(file = "../pool data/ltrm_water_data_lat_long.csv")
water <- read.csv(file = "../../LTRM data/ltrm_water_data_lat_long.csv")
water4 <- water %>%
filter(FLDNUM == "1")
# To split the water data, take everything above the longitude line and
# select everything that is not stratum 4 (Lake Pepin)
water4U <- water4 %>%
filter(LONGITUDE > -92.2 & STRATUM != "4") # & STRATUM != "6" & STRATUM != "5")
# Load libraries
library(tidyverse)
library(ggplot2)
library(lubridate)
library(RColorBrewer)
library(MASS)
# To split the water data, take everything above the longitude line and
# select everything that is not stratum 4 (Lake Pepin)
water4U <- water4 %>%
filter(LONGITUDE > -92.2 & STRATUM != "4") # & STRATUM != "6" & STRATUM != "5")
water4 <- water %>%
filter(FLDNUM == "1")
# To split the water data, take everything above the longitude line and
# select everything that is not stratum 4 (Lake Pepin)
water4U <- water4 %>%
filter(LONGITUDE > -92.2 & STRATUM != "4") # & STRATUM != "6" & STRATUM != "5")
# Create a map of the data points by LAT and LONG
# Show the split of upper pool 4 on the entire pool data - colored by STRATUM
ggplot(water4, mapping = aes(x = LATITUDE, y = LONGITUDE )) +
geom_point(aes(color = STRATUM))
# Create a map of the data points by LAT and LONG
# Show the split of upper pool 4 zoomed in - separate water4U_test to include
#   more data points than in the split - helps us to view that the split is good
water4U_test = water4 %>%
filter(LONGITUDE > -92.05)
# Create a map of the data points by LAT and LONG
# includes line showing where the points differ from upper pool and lake pepin
ggplot(data = water4U, mapping = aes(x = LATITUDE, y = LONGITUDE )) +
geom_point() +
geom_hline(yintercept = -92.11, color = "red")
# Create a map of the data points by LAT and LONG
# includes line showing where the points differ from upper pool and lake pepin
ggplot(data = water4U, mapping = aes(x = LATITUDE, y = LONGITUDE )) +
geom_point(color = STRATUM) +
geom_hline(yintercept = -92.11, color = "red")
# Create a map of the data points by LAT and LONG
# includes line showing where the points differ from upper pool and lake pepin
ggplot(data = water4U, mapping = aes(x = LATITUDE, y = LONGITUDE )) +
geom_point(color = STRATUM) +
geom_hline(yintercept = -92.11, color = "red")
# Create a map of the data points by LAT and LONG
# includes line showing where the points differ from upper pool and lake pepin
ggplot(data = water4U, mapping = aes(x = LATITUDE, y = LONGITUDE )) +
geom_point(aes(color = STRATUM)) +
geom_hline(yintercept = -92.11, color = "red")
# To split the water data, take everything above the longitude line and
# select everything that is not stratum 4 (Lake Pepin)
water4U <- water4 %>%
filter(LONGITUDE > -92.2 & STRATUM != "4" & STRATUM != "6" & STRATUM != "5")
# Create a map of the data points by LAT and LONG
# includes line showing where the points differ from upper pool and lake pepin
ggplot(data = water4U, mapping = aes(x = LATITUDE, y = LONGITUDE )) +
geom_point(aes(color = STRATUM)) +
geom_hline(yintercept = -92.11, color = "red")
# Create a map of the data points by LAT and LONG
# Show the split of upper pool 4 zoomed in - separate water4U_test to include
#   more data points than in the split - helps us to view that the split is good
water4U_test = water4 %>%
filter(LONGITUDE > -92.05)
# Create a map of the data points by LAT and LONG
# includes line showing where the points differ from upper pool and lake pepin
ggplot(data = water4U, mapping = aes(x = LATITUDE, y = LONGITUDE )) +
geom_point(aes(color = STRATUM)) +
geom_hline(yintercept = -92.11, color = "red")
# Create a map of the data points by LAT and LONG
# includes line showing where the points differ from upper pool and lake pepin
ggplot(data = water4U, mapping = aes(x = LATITUDE, y = LONGITUDE )) +
geom_point(aes(color = STRATUM)) +
geom_hline(yintercept = -92.2, color = "red")
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
data <- read.csv(file "../../LTRM data/ltrm_water_data_lat_lon.csv")
setwd("/Users/alainastockdill/UMR-TDA-2021/InterpolationCode/CART interpolation")
water <- read.csv(file = "../../LTRM data/water_data_qfneg.csv")
